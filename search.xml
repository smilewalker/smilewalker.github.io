<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+NexT的进阶配置</title>
    <url>/2020/04/16/Hexo+NexT%E7%9A%84%E8%BF%9B%E9%98%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>完成博客网站的基本搭建后，这篇文章是对于Hexo配置的进阶设置，可自定义选择。以下主题配置文件皆为Hexo主题themes目录下的_config.yml，网站配置文件皆为hexo根目录下的_config.yml。</p>
<a id="more"></a>

<ul>
<li>更改头像</li>
<li>侧边栏社交信息设置</li>
<li>摘要自动生成</li>
<li>添加字数统计、阅读时长</li>
<li>文章底部添加版权信息</li>
<li>设置动态背景</li>
<li>添加网页进度加载条</li>
<li>底部隐藏由Hexo强力驱动、主题–NexT.Mist</li>
<li>显示当前浏览进度</li>
<li>设置网站的图标Favicon</li>
<li>Hexo博客添加站内搜索</li>
</ul>
<h2 id="更改头像"><a href="#更改头像" class="headerlink" title="更改头像"></a>更改头像</h2><p>编辑主题配置文件，修改 avatar，值设置成头像的链接地址。其中，头像的链接地址可以是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar: &#x2F;images&#x2F;avatar.png</span><br></pre></td></tr></table></figure>

<h2 id="侧边栏社交链接设置"><a href="#侧边栏社交链接设置" class="headerlink" title="侧边栏社交链接设置"></a>侧边栏社交链接设置</h2><p>编辑主题配置文件_config.yml，修改social字段的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Social Links</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value is the target link (E.g. GitHub: https:&#x2F;&#x2F;github.com&#x2F;iissnan)</span><br><span class="line">social:</span><br><span class="line">  #LinkLabel: Link</span><br><span class="line">  Github: https:&#x2F;&#x2F;github.com&#x2F;yourgithub</span><br><span class="line">  E-Mail: mailto:dawnxu96@gmail.com</span><br><span class="line">  Instagram: https:&#x2F;&#x2F;instagram.com&#x2F;yourins</span><br></pre></td></tr></table></figure>

<h2 id="摘要设置"><a href="#摘要设置" class="headerlink" title="摘要设置"></a>摘要设置</h2><p>编辑主题配置文件_config.yml，修改auto_excerpt字段为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true	# 置为true则自动截取100字当做首页摘要</span><br><span class="line">  length: 100	# 自动截取的字数</span><br></pre></td></tr></table></figure>

<p>上述的方式并不推荐，推荐是手动设置文章摘要，手动设置文章摘要，我们只需在想显示为摘要的内容之后添 <!-- more --> 即可。像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello hexo markdown</span><br><span class="line">date: 2016-11-16 18:11:25</span><br><span class="line">tags:</span><br><span class="line">- hello</span><br><span class="line">- hexo</span><br><span class="line">- markdown</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">文章摘要内容</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">紧接着文章摘要的正文内容</span><br></pre></td></tr></table></figure>

<h2 id="文章底部添加版权信息"><a href="#文章底部添加版权信息" class="headerlink" title="文章底部添加版权信息"></a>文章底部添加版权信息</h2><p>修改主题配置文件_config.yml中字段的值为true即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Declare license on posts</span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  license: CC BY-NC-SA 3.0</span><br><span class="line">  license_url: https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;3.0&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="添加网页进度加载条"><a href="#添加网页进度加载条" class="headerlink" title="添加网页进度加载条"></a>添加网页进度加载条</h2><p>编辑主题配置文件，搜索pace，将其值改为ture就可以，之后选择一款你喜欢的样式即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-minimal</span><br></pre></td></tr></table></figure>
<h2 id="底部隐藏由Hexo强力驱动"><a href="#底部隐藏由Hexo强力驱动" class="headerlink" title="底部隐藏由Hexo强力驱动"></a>底部隐藏由Hexo强力驱动</h2><ul>
<li>方法1<br>直接修改主题配置文件_config.yml中的copyright配置项为false，假如没有该配置项，可以通过方法2<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Footer &#96;powered-by&#96; and &#96;theme-info&#96; copyright</span><br><span class="line">copyright: false</span><br></pre></td></tr></table></figure></li>
<li>方法2<br>打开./themes/next/layout/_partials/footer.swig，注释掉相应代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 用下面的符号注释，注释代码用下面括号括起来</span><br><span class="line">&#x2F;&#x2F; &lt;!-- --&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&#123;% if theme.copyright %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;powered-by&quot;&gt;</span><br><span class="line">  &#123;&#123; __(&#39;footer.powered&#39;, &#39;&lt;a class&#x3D;&quot;theme-link&quot; href&#x3D;&quot;https:&#x2F;&#x2F;hexo.io&quot;&gt;Hexo&lt;&#x2F;a&gt;&#39;) &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">​</span><br><span class="line">&lt;div class&#x3D;&quot;theme-info&quot;&gt;</span><br><span class="line">  &#123;&#123; __(&#39;footer.theme&#39;) &#125;&#125; -</span><br><span class="line">  &lt;a class&#x3D;&quot;theme-link&quot; href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&quot;&gt;</span><br><span class="line"> NexT.&#123;&#123; theme.scheme &#125;&#125;</span><br><span class="line">  &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h2><p>修改主题配置文件，把 false 改为 true：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line">b2t: true</span><br><span class="line">​</span><br><span class="line"># Scroll percent label in b2t button</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure>

<h2 id="设置网站的图标Favicon"><a href="#设置网站的图标Favicon" class="headerlink" title="设置网站的图标Favicon"></a>设置网站的图标Favicon</h2><p>修改主题配置文件_config.yml中的favicon配置项，指定图标所在路径即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Put your favicon.ico into &#96;hexo-site&#x2F;source&#x2F;&#96; directory.</span><br><span class="line">favicon: &#x2F;favicon-32x32.png</span><br></pre></td></tr></table></figure>

<h2 id="Hexo博客添加站内搜索"><a href="#Hexo博客添加站内搜索" class="headerlink" title="Hexo博客添加站内搜索"></a>Hexo博客添加站内搜索</h2><p>NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia。我安装的是Local Search的安装。<br>安装 hexo-generator-search<br><code>$ npm install hexo-generator-search --save</code><br>安装 hexo-generator-searchdb<br><code>$ npm install hexo-generator-searchdb --save</code><br>编辑主题配置文件，设置local_searchenable为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;flashlab&#x2F;hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>
<h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><p>注册登陆leanCloud官网，点击存储，查看是否有Comment，没有则创建，权限设为无限制。<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870193229416.jpg" alt="-w1194"></p>
<p>进入主题配置文件修改为true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https:&#x2F;&#x2F;leancloud.cn</span><br><span class="line"># more info please open https:&#x2F;&#x2F;valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid:  leancloudn你自己的id  appkey:  leancloudn你自己的key  </span><br><span class="line">  notify: false # mail notifier , https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: Just go go # comment box placeholder</span><br><span class="line">  avatar: robohash # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure>
<p>进入leancloud即可看到评论<br>～</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo(MacOS)+Github快速搭建博客</title>
    <url>/2020/04/15/Hexo(MacOS)+Github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>信息化时代的我们有许多平台去写文章，比如心得，护肤，经验，学习，技术。每个平台都有自己的主打方向，可能我们管理着不同的平台，规划这里写什么主题，那里写什么主题。作为希望拥有自己的文章汇集处，能够全局看自己的文章，折腾捣鼓下，建立自己的博客是非常因吹斯汀以及捎带一些成就感。那么这篇文章就是带着Geek精神来从0到1快速搭建自己的博客系统，动手试试吧！</p>
</blockquote>
<h1 id="Hexo是什么"><a href="#Hexo是什么" class="headerlink" title="Hexo是什么"></a>Hexo是什么</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的基于Node.js博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，进而托管在Github上。</p>
<p>这是我的个人博客效果，可浏览：<a href="https://smilewalker.github.io/">Smilewalker</a></p>
<h1 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建"></a>如何搭建</h1><ul>
<li>安装git</li>
<li>安装node</li>
<li>安装Hexo</li>
<li>Github创建个人仓库</li>
<li>Hexo 基本配置 </li>
<li>Hexo 更换主题</li>
<li>Hexo 设置打赏</li>
<li>Hexo 菜单设置</li>
<li>Hexo 添加标签</li>
<li>Hexo 添加分类</li>
<li>Hexo 设置背景动画</li>
<li>Hexo 简单命令</li>
</ul>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>首先查看电脑是否安装Git，终端输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure>
<p>如果没有安装过命令行开发者工具，将会提示你安装。<br>如果你想安装更新的版本，可以使用二进制安装程序。 官方维护的 macOS Git 安装程序可以在 Git 官方网站下载，网址为 <a href="https://git-scm.com/download/mac。" target="_blank" rel="noopener">https://git-scm.com/download/mac。</a></p>
<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>可直接官网下载Node.js，一步步安装完成即可。<br>安装好之后查询是否成功，进入Mac终端，输入代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>如果错误，则显示not found<br>如果正确，则显示版本号<br>node安装会顺带着npm一起，同时可查询npm版本号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>直接输出版本号成功</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>本地创建Blog文件夹，Hexo是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog/myBlog，自由定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
<p>如果长久停留没安装完成，退出重新安装，换代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure>
<p>会有提示输入密码，新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── _config.yml &#x2F;&#x2F;网站的配置信息，您以在此配置大部分的参数。</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source &#x2F;&#x2F;资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes &#x2F;&#x2F;主题 文件夹。Hexo 会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure>

<h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><p>进入创建的本地文件夹，在终端窗口下，定位到 Hexo 站点目录下，比如建立在documents下的myBlog,利用cd进入：<br><code>cd ~/documents/myBlog</code><br>输入代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><p>终端输入:hexo g &amp;&amp; hexo s<br>进入<a href="http://localhost:4000/，可以看到hexo的基本网站。" target="_blank" rel="noopener">http://localhost:4000/，可以看到hexo的基本网站。</a></p>
<h2 id="Github创建个人仓库"><a href="#Github创建个人仓库" class="headerlink" title="Github创建个人仓库"></a>Github创建个人仓库</h2><p>登陆github网站，注册并登陆GitHub账号后，新建仓库，名称必须为 user.github.io，这里的user是github的用户名，如我是smilewalker.github.io。 右上角点击创建<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/githubRepro.jpg" alt="-w758"><br>测试下仓库是否搭建成功，进入index.html，输入Hello world～<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/hexoInit2.jpg" alt="-w1096"><br>这个时候打开 http://你的用户名.github.io 就可以看到你的站点啦，<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/hexoInit3.jpg" alt="-w445"><br>index.html 内容只是暂时的预览效果，后面把 Hexo 的文件部署上去就可以在 http://你的用户名.github.io 看到你自己的博客啦！</p>
<h2 id="Hexo部署到Github"><a href="#Hexo部署到Github" class="headerlink" title="Hexo部署到Github"></a>Hexo部署到Github</h2><p>然后继续操作终端，ctrl+c停止本地localhost，查看自己的ssh，这个与github部署有关</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>出现一串长字符，复制<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/githubSSH.jpg" alt="-w575"></p>
<p>进入github的设置，输入自己的Key，会要求输入github的密码，输入即可，一步步操作<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/githubSsh2.jpg" alt="-w1084"><br>完成配置<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/githubSsh3.jpg" alt="-w815"></p>
<p>验证是否连接成功，进入终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>enter pass是指mac你自己的密码；刚开始我出现错误是因为没有在github添加ssh，正常出现结果：<br>You’ve successfully authenticated, but GitHub does not provide shell access </p>
<p>进入本地创建的文件夹， 打开文件_config.yml，翻到最底下，将下面代码复制进去。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:  type: git  repository: https:&#x2F;&#x2F;github.com&#x2F;smilewalker&#x2F;smilewalker.github.io.git  branch: master</span><br></pre></td></tr></table></figure>

<p>其中将repository中smilewalker改为自己的用户名，注意type、repository、branch后均有空格，注意保存。通过如下命令在你的博客文件夹下生成静态文件并上传到服务器。<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/blogConfig.jpg" alt="-w660"><br>终端输入：<br>hexo g &amp;&amp; hexo d<br>进入自己的github网址，查看，成功部署<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/githubInit.jpg" alt="-w1241"></p>
<h2 id="Hexo-基本配置"><a href="#Hexo-基本配置" class="headerlink" title="Hexo 基本配置"></a>Hexo 基本配置</h2><p>可以在创建的hexo博客目录下的_config.yml 中修改大部分的配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数	描述</span><br><span class="line">title	网站标题</span><br><span class="line">subtitle	网站副标题</span><br><span class="line">description	网站描述,主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词</span><br><span class="line">keywords	网站的关键词。使用半角逗号 , 分隔多个关键词。</span><br><span class="line">author	您的名字,用于主题显示文章的作者</span><br><span class="line">language	网站使用的 d语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</span><br><span class="line">timezone	网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia&#x2F;Shanghai。</span><br></pre></td></tr></table></figure>

<p>比如<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870085249990.jpg" alt="-w647"></p>
<h2 id="Hexo-更换主题"><a href="#Hexo-更换主题" class="headerlink" title="Hexo 更换主题"></a>Hexo 更换主题</h2><p>主题不好看，换！这里换了经典版的next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>打开站点的_config.yml配置文件，修改主题为next，可以看到原来是landscape主题，修改为next<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870081220268.jpg" alt="-w384"><br>打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings<br>next主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p>
<p>选择 Scheme，NexT提供了多种不同的外观，目前NexT支持以下三种：<br>    • Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白<br>    • Mist - Muse 的紧凑版本，整洁有序的单栏外观<br>    • Pisces - 双栏 Scheme，小家碧玉似的清新<br>    <img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870082855906.jpg" alt="-w420"></p>
<p>检测是否成功，开启调试模式（即加上 –debug），整个命令是： hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息， 当命令行输出中提示出：<br>INFO  Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.<br>此时即可使用浏览器访问 <a href="http://localhost:4000，检查站点是否正确运行。">http://localhost:4000，检查站点是否正确运行。</a></p>
<h2 id="Hexo-设置打赏"><a href="#Hexo-设置打赏" class="headerlink" title="Hexo 设置打赏"></a>Hexo 设置打赏</h2><p>博文打赏的微信、支付宝二维码图片，这里是直接把这两张放在根目录的source文件夹中，并没有使用图床外链。<br>在主题配置文件_config.yml修改基本的主题信息，如：<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870085785596.jpg" alt="-w372"></p>
<h2 id="Hexo-菜单设置"><a href="#Hexo-菜单设置" class="headerlink" title="Hexo 菜单设置"></a>Hexo 菜单设置</h2><p>进入主题的配置文件<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870122448185.jpg" alt="-w479"><br>⚠️ 如果报错 cannot get /catgories%20/，我的解决方法：去掉空格，不要/ 也不用空格 直接+｜｜</p>
<h2 id="Hexo-添加标签"><a href="#Hexo-添加标签" class="headerlink" title="Hexo 添加标签"></a>Hexo 添加标签</h2><p>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
<p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives</span><br><span class="line">  tags: &#x2F;tags</span><br></pre></td></tr></table></figure>
<p>新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签测试文章</span><br><span class="line">tags:</span><br><span class="line">  - Testing</span><br><span class="line">  - Another Tag</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>注意：如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">禁用评论示例</span><br><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2 id="Hexo-添加分类"><a href="#Hexo-添加分类" class="headerlink" title="Hexo 添加分类"></a>Hexo 添加分类</h2><p>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>
<p>编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加「分类」页面<br>新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 底下代码是一篇包含分类的文章的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 分类测试文章</span><br><span class="line">categories: Testing</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2 id="Hexo-设置背景动画"><a href="#Hexo-设置背景动画" class="headerlink" title="Hexo 设置背景动画"></a>Hexo 设置背景动画</h2><p>设置「背景动画」,NexT 自带两种背景动画效果,编辑 主题配置文件， 搜索 canvas_nest 或 three_waves，根据您的需求设置值为 true 或者 false 即可：<br>注意： three_waves 在版本 5.1.1 中引入。只能同时开启一种背景动画效果。<br>canvas_nest 配置示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># canvas_nest</span><br><span class="line">canvas_nest: true &#x2F;&#x2F;开启动画</span><br><span class="line">canvas_nest: false &#x2F;&#x2F;关闭动画</span><br><span class="line">three_waves 配置示例</span><br><span class="line"># three_waves</span><br><span class="line">three_waves: true &#x2F;&#x2F;开启动画</span><br><span class="line">three_waves: false &#x2F;&#x2F;关闭动画</span><br></pre></td></tr></table></figure>
<h2 id="Hexo-简单命令"><a href="#Hexo-简单命令" class="headerlink" title="Hexo 简单命令"></a>Hexo 简单命令</h2><p>我们开始正式发布上线博客文章，在命令行中输入：<br>hexo n “博客名字”<br>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 博客名字.md 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，这是我的一篇博文内容示例：<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870084908747.jpg" alt="-w194"><br>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; &#x3D;&#x3D; hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate #生成</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server #启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure>
<p>恭喜你拥有一个拥有喜欢的主题的基本博客～</p>
<p>⚠️ <em>更多进阶设置可查阅 <a href="https://smilewalker.github.io/2020/04/16/Hexo+NexT的进阶配置/#more">《Hexo+NexT的进阶设置》</a></em></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>MWeb+七牛云图床</title>
    <url>/2020/04/16/MWeb+%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="拥有七牛云账号"><a href="#拥有七牛云账号" class="headerlink" title="拥有七牛云账号"></a>拥有七牛云账号</h2><p>注册<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>就不多介绍了，主要是要注意创建存储对象的时候，空间名称不能重复、所选择的存储区域要记得、访问限制一定要选<code>公开空间</code>，如下图：<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870136570806.jpg" alt="-w1049"></p>
<h2 id="MWeb设置七牛云发布"><a href="#MWeb设置七牛云发布" class="headerlink" title="MWeb设置七牛云发布"></a>MWeb设置七牛云发布</h2><p>进入Mweb—偏好设置-发布服务，选择七牛云<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870144093612.jpg" alt="-w616"></p>
<p>AK与SK是七牛云的SK与AK，进入七牛云的个人中心–密钥管理-AK/SK复制<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870158968891.jpg" alt="-w610"></p>
<p>名称：填入自定的名称即可。<br>API 地址：用默认这个即可<br>空间名称：你在七牛中新增的空间的名称。<br>Access Key 和 Secret Key：在 七牛个人首页 - 帐号 - 密钥 中可以找到。<br>文件保存路径：自己空间的七牛云路径，这个要去到空间，随便上传一张图，选中后就可以看到外链地址，这样就知道路径前缀了</p>
<h2 id="上传发布"><a href="#上传发布" class="headerlink" title="上传发布"></a>上传发布</h2><p>填写完成后可点验证按钮，选择一张图片去七牛云空间验证一下是否设置成功。<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870159287038.jpg" alt="-w985"></p>
<p>设置成功后，打开要把本地图片上传到图床的文档，点软件右上角的 分享 按钮，在弹出的菜单中选择 把本地图片上传至图床 ，如下图：<br><img src="http://q8v8xdx6p.bkt.clouddn.com/mweb/15870162275230.jpg" alt="-w1070"></p>
<p>点击上传图片即可，这时候针对的是该篇文档的图片，这样就可以实现图片上传到七牛云了，另外上传图片前可进行图片的压缩，以免文件过大而造成加载慢。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Mail绑定QQ邮箱</title>
    <url>/2017/09/28/Mac%20Mail%E7%BB%91%E5%AE%9AQQ%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<p>Mac 拥有自带的Mail软件，不用下载邮箱软件便可进行一体化处理，已经导入163邮箱、公司邮箱，正在倒腾QQ邮箱，发现报错，然而账号密码均没问题，遇到这种情况怎么解决呢？</p>
<a id="more"></a>

<p>Mac 拥有自带的Mail软件，不用下载邮箱软件便可进行一体化处理，已经导入163邮箱、公司邮箱，正在倒腾QQ邮箱，发现报错，然而账号密码均没问题，遇到这种情况怎么解决呢？其实并不难。</p>
<p>邮件——添加帐户——QQ邮箱——配置邮箱（输入账号密码），提示错误；<br><img src="http://upload-images.jianshu.io/upload_images/2320147-314949ed89a3cf61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="错误"></p>
<p>错在该mail的密码非自己邮箱账号的密码，而是qq生成的授权码，正确姿势应是：首先进入QQ邮箱，设置——账户——POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-db7c0ce8d022da7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="配置"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-a1ede29e2b3925cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="密码"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-aaa600eb5daa17c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="输入授权码"></p>
<p>配置成功！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-25ee52b0ccf8065a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="配置成功"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装office365</title>
    <url>/2019/03/15/Mac%E5%AE%89%E8%A3%85office365/</url>
    <content><![CDATA[<p>自从mac升级系统，原先的2016版office总是闪退；<br>索性去App store下了Office，发现是365版本，不激活无法使用；<br>一番搜索折腾总算安装成功，两步搞定，分享经验仅供参考。</p>
<a id="more"></a>

<h3 id="1-前言："><a href="#1-前言：" class="headerlink" title="1. 前言："></a>1. 前言：</h3><p>自从mac升级系统，原先的2016版office总是闪退；<br>索性去App store下了Office，发现是365版本，不激活无法使用；<br>一番搜索折腾总算安装成功，两步搞定，分享经验仅供参考。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2320147-a2415d8c7cb8514b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="2-资源分享："><a href="#2-资源分享：" class="headerlink" title="2. 资源分享："></a>2. 资源分享：</h3><p><img src="https://upload-images.jianshu.io/upload_images/2320147-6c50d6b03939caa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>office365下载链接:<a href="https://pan.baidu.com/s/1gNxk0P5GEzqVbHyFt8OmVQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1gNxk0P5GEzqVbHyFt8OmVQ</a>  密码:u05s</p>
<p>破解补丁下载链接:<a href="https://pan.baidu.com/s/1xRX65K5vhXF9X9pB8VdSSg" target="_blank" rel="noopener">https://pan.baidu.com/s/1xRX65K5vhXF9X9pB8VdSSg</a>  密码:tss5</p>
<h3 id="3-“傻瓜式”安装"><a href="#3-“傻瓜式”安装" class="headerlink" title="3. “傻瓜式”安装"></a>3. “傻瓜式”安装</h3><p>下载完成后，按照提示正常安装，“傻瓜式”操作。<br>（1）先安装office365，不需要打开；<br>（2）office完成后，安装补丁工具。<br>（3）最后完成。<br><img src="https://upload-images.jianshu.io/upload_images/2320147-d8b4d41c310695a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>😄</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>app</tag>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac实现Adobe Indesign CC快速切换中英</title>
    <url>/2018/10/28/Mac%E5%AE%9E%E7%8E%B0AdobeIndesignCC%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E4%B8%AD%E8%8B%B1/</url>
    <content><![CDATA[<p>Mac 如何快速实现Adobe Indesign CC 2018 中英文切换，比如说我的版本是英文版，想切到中文版，怎么做？<br><img src="https://upload-images.jianshu.io/upload_images/2320147-cd43f3db4a662c33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Adobe CC">邮箱、公司邮箱，正在倒腾QQ邮箱，发现报错，然而账号密码均没问题，遇到这种情况怎么解决呢？</p>
<a id="more"></a>

<p>Mac 如何快速实现Adobe Indesign CC 2018 中英文切换，比如说我的版本是英文版，想切到中文版，怎么做？<br><img src="https://upload-images.jianshu.io/upload_images/2320147-cd43f3db4a662c33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Adobe CC"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2320147-13d58a46211db1da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>点击应用程序，如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/2320147-d07d36c00206192e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2320147-4b3a8130e6265c99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p>
<p>将“Find-Change Queries”里的的三个包：GREP 与 Object 与 Text 的文件名的“en_US”都换成“zh_CN”</p>
<p>同理，再将“InDesign Shortcut Sets” 的 “en_US”换成“zh_CN”，再将“InDesign_Workspaces” 的 “en_US”换成“zh_CN”，重新打开Indesign CC，成功完成了英文en_US转化成了中文zh_CN，是不是很简单呢～</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>app</tag>
        <tag>办公</tag>
        <tag>adobe</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac快捷键指南</title>
    <url>/2019/04/28/Mac%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>Mac快捷指南集合，先收藏着：<br><em>注释： Command（或 Cmd）⌘；Shift ⇧；Option（或 Alt）⌥；Control（或 Ctrl）⌃；Caps Lock ⇪；Fn</em></p>
<h3 id="常用快捷键组合"><a href="#常用快捷键组合" class="headerlink" title="常用快捷键组合"></a>常用快捷键组合</h3><ul>
<li><strong>剪切Cmd-X、拷贝Cmd-C、粘贴Cmd-V</strong></li>
<li><strong>Command-Z</strong>：撤销上一个命令。随后可按 Shift-Command-Z 来重做，从而反向执行撤销命令。在某些应用中可以撤销和重做多个命令。</li>
<li><strong>Command-Tab</strong>：在打开的应用中切换到下一个最近使用的应用。</li>
<li>Command-P：打印当前文稿。</li>
<li><strong>Command-W</strong>：关闭最前面的窗口。要关闭应用的所有窗口，请按下 Option-Command-W。</li>
<li><strong>Control-Command–空格键</strong>：显示字符检视器，可以从中选择表情符号和其他符号。</li>
<li><strong>Command-G</strong>：再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 Shift-Command-G。</li>
<li><strong>Command-H</strong>：隐藏最前面的应用的窗口。要查看最前面的应用但隐藏所有其他应用，请按 Option-Command-H。</li>
<li><strong>Command-O</strong>：打开所选项，或打开一个对话框以选择要打开的文件。</li>
<li><strong>Command-T</strong>：打开新标签页。</li>
<li><strong>Option-Command-Esc</strong>：强制退出应用。</li>
<li><strong>Control-Command-F</strong>：全屏使用应用（如果应用支持）。</li>
<li><strong>Shift-Command-5</strong>：在 macOS Mojave中，拍摄屏幕快照或录制屏幕。在更早的 macOS 版本中，请使用 Shift-Command-3 或 Shift-Command-4 来拍摄屏幕快照。</li>
<li><strong>Shift-Command-N</strong>：在“访达”中创建一个新文件夹。</li>
<li><strong>Command-逗号 (,)</strong>：打开最前面的应用的偏好设置。</li>
</ul>
<h3 id="睡眠、退出登录和关机快捷键"><a href="#睡眠、退出登录和关机快捷键" class="headerlink" title="睡眠、退出登录和关机快捷键"></a>睡眠、退出登录和关机快捷键</h3><p>在这些快捷键中，可能需要按住其中一些快捷键稍长时间。这样可以避免您无意中启用快捷键。</p>
<ul>
<li><strong>电源按钮</strong>：按下可将 Mac 开机或将 Mac 从睡眠状态唤醒。按住这个按钮 1.5 秒可使 Mac 进入睡眠状态。*继续按住则会强制您的 Mac 关机。</li>
<li><strong>Option–Command–电源按钮</strong>或 <strong>Option–Command–Media Eject（Option–Command–介质推出键）</strong> ：将您的 Mac 置于睡眠状态。</li>
<li><strong>Control–Shift–电源按钮</strong>或 <strong>Control–Shift–Media Eject（Control–Shift–介质推出键）</strong>  ：将显示器置于睡眠状态。</li>
<li><strong>Command-Tab</strong>：在打开的应用中切换到下一个最近使用的应用。</li>
<li><strong>Control–电源按钮</strong> 或 <strong>Control–Media Eject（Control–介质推出键）</strong>：显示一个对话框，询问您是要重新启动、睡眠还是关机。</li>
<li><strong>Control–Command–Power 电源按钮</strong>：强制 Mac 重新启动，系统不会提示是否要存储任何打开且未存储的文稿。</li>
<li><strong>Control–Command–Media Eject（Control–Command–介质推出键）</strong>  ：退出所有应用，然后重新启动您的 Mac。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</li>
<li><strong>Control–Option-Command–电源按钮</strong>或 <strong>Control–Option–Command–Media Eject（Control–Option–Command–介质推出键）</strong>：退出所有应用，然后将您的 Mac 关机。如果任何打开的文稿有未存储的更改，系统会询问您是否要存储这些更改。</li>
<li><strong>Shift–Command–Q</strong>：退出登录您的 macOS 用户帐户。系统将提示您确认。要在不确认的情况下立即退出登录，请按下 Option-Shift-Command-Q。</li>
</ul>
<h3 id="访达和系统快捷键"><a href="#访达和系统快捷键" class="headerlink" title="访达和系统快捷键"></a>访达和系统快捷键</h3><ul>
<li><strong>Command-D</strong>：复制所选文件。</li>
<li><strong>Command-E</strong>：推出所选磁盘或宗卷。</li>
<li><strong>Command-F</strong>：在“访达”窗口中开始“聚焦”搜索。</li>
<li><strong>Command-I</strong>：显示所选文件的“显示简介”窗口。</li>
<li><strong>Command-R</strong>：(1) 如果在“访达”中选择了某个别名：显示所选别名对应的原始文件。(2) 在某些应用（如“日历”或 Safari 浏览器）中，刷新或重新载入页面。(3) 在<a href="https://support.apple.com/zh-cn/HT201541" target="_blank" rel="noopener">“软件更新”偏好设置</a>中，再次检查有没有软件更新。</li>
<li><strong>Shift-Command-C</strong>：打开“电脑”窗口。</li>
<li><strong>Shift-Command-D</strong>：打开“桌面”文件夹。</li>
<li><strong>Shift-Command-F</strong>：打开“最近使用”窗口，其中显示了您最近查看或更改过的所有文件。</li>
<li><strong>Shift-Command-G</strong>：打开“前往文件夹”窗口。</li>
<li><strong>Shift-Command-H</strong>：打开当前 macOS 用户帐户的个人文件夹。</li>
<li><strong>Shift-Command-I</strong>：打开 iCloud 云盘。</li>
<li><strong>Shift-Command-K</strong>：打开“网络”窗口。</li>
<li>**Option-Command-L：打开“下载”文件夹。</li>
<li><strong>Shift-Command-N</strong>：新建文件夹。</li>
<li><strong>Shift-Command-O</strong>：打开“文稿”文件夹。</li>
<li><strong>Shift-Command-P</strong>：在“访达”窗口中显示或隐藏预览面板。</li>
<li><strong>Shift-Command-R</strong>：打开“隔空投送”窗口。</li>
<li><strong>Shift-Command-T</strong>：显示或隐藏“访达”窗口中的标签页栏。</li>
<li><strong>Ctrl-Shift-Command-T</strong>：将所选的“访达”项目添加到“程序坞”（OS X Mavericks 或更高版本）</li>
<li><strong>Shift-Command-U</strong>：打开“实用工具”文件夹。</li>
<li><strong>Option-Command-D</strong>：显示或隐藏“程序坞”。</li>
<li><strong>Control-Command-T</strong>：将所选项添加到边栏（OS X Mavericks 或更高版本）。</li>
<li><strong>Option-Command-P</strong>：隐藏或显示“访达”窗口中的路径栏。</li>
<li><strong>Option-Command-S</strong>：隐藏或显示“访达”窗口中的边栏。</li>
<li><strong>Command–斜线(/)</strong>：隐藏或显示“访达”窗口中的状态栏。</li>
<li><strong>Command-J</strong>：显示“显示”选项。</li>
<li><strong>Command-K</strong>：打开“连接服务器”窗口。</li>
<li><strong>Command-L</strong>：为所选项制作替身。</li>
<li><strong>Command-N</strong>：打开一个新的“访达”窗口。</li>
<li><strong>Option-Command-N</strong>：新建智能文件夹。</li>
<li><strong>Command-T</strong>：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏标签页栏。</li>
<li><strong>Option-Command-T</strong>：在当前“访达”窗口中有单个标签页开着的状态下显示或隐藏工具栏。</li>
<li><strong>Option-Command-V</strong>：移动：将剪贴板中的文件从原始位置移动到当前位置。</li>
<li><strong>Command-Y</strong>：使用“快速查看”预览所选文件。</li>
<li><strong>Option-Command-Y</strong>：显示所选文件的快速查看幻灯片显示。</li>
<li><strong>Command-1</strong>：以图标方式显示“访达”窗口中的项目。</li>
<li><strong>Command-2</strong>：以列表方式显示“访达”窗口中的项目。</li>
<li><strong>Command-3</strong>：以分栏方式显示“访达”窗口中的项目。</li>
<li><strong>Command-4</strong>：以封面流方式显示“访达”窗口中的项目。</li>
<li><strong>Command–左中括号 ([)</strong>：前往上一文件夹。</li>
<li><strong>Command–右中括号 (])</strong>：前往下一个文件夹。</li>
<li><strong>Command–**</strong>上箭头**：打开包含当前文件夹的文件夹。</li>
<li><strong>Command–Control–上箭头</strong>：在新窗口中打开包含当前文件夹的文件夹。</li>
<li><strong>Command–下箭头</strong>：打开所选项。</li>
<li><strong>右箭头</strong>：打开所选文件夹。这个快捷键仅在列表视图中有效。</li>
<li><strong>左箭头</strong>：关闭所选文件夹。这个快捷键仅在列表视图中有效。</li>
<li><strong>Command-Delete</strong>：将所选项移到废纸篓。</li>
<li><strong>Shift-Command-Delete</strong>：清倒废纸篓。</li>
<li><strong>Option-Shift-Command-Delete</strong>：清倒废纸篓而不显示确认对话框。</li>
<li><strong>Command–调高亮度</strong>：打开或关闭<a href="https://support.apple.com/zh-cn/HT204592" target="_blank" rel="noopener">目标显示器模式</a>。</li>
<li><strong>Command–调低亮度</strong>：当您的 Mac 连接到多台显示器时，打开或关闭<a href="https://support.apple.com/zh-cn/HT202351#mirroring" target="_blank" rel="noopener">视频镜像</a>。</li>
<li><strong>Option–调高亮度</strong>：打开“显示器”偏好设置。这个快捷键可与任一亮度键搭配使用。</li>
<li><strong>Control–调高亮度</strong>或 <strong>Control–**</strong>调低亮度**：更改外部显示器的亮度（如果显示器支持）。</li>
<li><strong>Option-Shift–调高亮度</strong>或 <strong>Option-Shift–**</strong>调低亮度**：以较小的步幅调节显示器亮度。如果您的显示器支持，可以将 Control 键添加到此快捷键，以便在外置显示器上进行调节。</li>
<li><strong>Option–“调度中心”</strong>：打开“调度中心”偏好设置。</li>
<li><strong>Command–“调度中心”</strong>：显示桌面。</li>
<li><strong>Control–**</strong>下箭头**：显示最前面的应用的所有窗口。</li>
<li><strong>Option–**</strong>调高音量**：打开“声音”偏好设置。这个快捷键可与任一音量键搭配使用。</li>
<li><strong>Option-Shift–调高音量</strong>或 <strong>Option-Shift–调低音量</strong>：以较小的步幅调节音量。</li>
<li><strong>Option–键盘调高亮度</strong>：打开“键盘”偏好设置。这个快捷键可与任一键盘亮度键搭配使用。</li>
<li><strong>Option-Shift–键盘调高亮度</strong>或 <strong>Option-Shift–键盘调低亮度</strong>：以较小的步幅调节键盘亮度。</li>
<li><strong>连按</strong> <strong>Option</strong> <strong>键</strong>：在单独的窗口中打开项目，然后关闭原始窗口。</li>
<li><strong>连按</strong> <strong>Command</strong> <strong>键</strong>：在单独的标签页或窗口中打开文件夹。</li>
<li><strong>按住 Command 键拖移到另一个宗卷</strong>：将拖移的项目移到另一个宗卷，而不是拷贝它。</li>
<li><strong>按住</strong> <strong>Option</strong> <strong>键拖移</strong>：拷贝托移的项目。拖移项目时指针会随之变化。</li>
<li><strong>按住</strong> <strong>Option-Command</strong> <strong>键拖移</strong>：为拖移的项目制作替身。拖移项目时指针会随之变化。</li>
<li><strong>按住</strong> <strong>Option</strong> <strong>键点按开合三角</strong>：打开所选文件夹内的所有文件夹。此快捷键仅在列表视图中有效。</li>
<li><strong>按住 Command 键点按窗口标题</strong>：查看包含当前文件夹的文件夹。</li>
<li>点按“访达”菜单栏中的“前往”菜单查看用于打开许多常用文件夹（如“应用程序”、“文稿”、“下载”、“实用工具”和“iCloud 云盘”）的快捷键。</li>
</ul>
<h3 id="文稿快捷键"><a href="#文稿快捷键" class="headerlink" title="文稿快捷键"></a>文稿快捷键</h3><p>这些快捷键的行为可能因您使用的应用而异。</p>
<ul>
<li><strong>Command-B</strong>：以粗体显示所选文本，或者打开或关闭粗体显示功能。</li>
<li><strong>Command-I</strong>：以斜体显示所选文本，或者打开或关闭斜体显示功能。</li>
<li><strong>Command-K</strong>：添加网页链接。</li>
<li><strong>Command-U</strong>：对所选文本加下划线，或者打开或关闭加下划线功能。</li>
<li><strong>Command-T</strong>：显示或隐藏“字体”窗口。</li>
<li><strong>Command-D</strong>：从“打开”对话框或“存储”对话框内选择“桌面”文件夹。</li>
<li><strong>Control-Command-D</strong>：显示或隐藏所选字词的定义。</li>
<li><strong>Shift-Command–冒号 (:)</strong>：显示“拼写和语法”窗口。</li>
<li><strong>Command–分号 (;)</strong>：查找文稿中拼写错误的字词。</li>
<li><strong>Option-Delete</strong>：删除插入点左边的字词。</li>
<li><strong>Control-H</strong>：删除插入点左边的字符。也可以使用 Delete 键。</li>
<li><strong>Control-D</strong>：删除插入点右边的字符。也可以使用 Fn-Delete。</li>
<li><strong>Fn-Delete</strong>：在没有向前删除  键的键盘上向前删除。也可以使用 Control-D。</li>
<li><strong>Control-K</strong>：删除插入点与行或段落末尾处之间的文本。</li>
<li><strong>Fn–**</strong>上箭头**：Page Up：向上滚动一页。</li>
<li><strong>Fn–**</strong>下箭头**：Page Down：向下滚动一页。</li>
<li><strong>Fn–**</strong>左箭头：**Home：滚动到文稿开头。</li>
<li><strong>Fn–**</strong>右箭头**：End：滚动到文稿末尾。</li>
<li><strong>Command–上箭头</strong>：将插入点移至文稿开头。</li>
<li><strong>Command–下箭头</strong>：将插入点移至文稿末尾。</li>
<li><strong>Command–左箭头</strong>：将插入点移至当前行的行首。</li>
<li><strong>Command–右箭头</strong>：将插入点移至当前行的行尾。</li>
<li><strong>Option–左箭头</strong>：将插入点移至上一字词的词首。</li>
<li><strong>Option–右箭头</strong>：将插入点移至下一字词的词尾。</li>
<li><strong>Shift-Command–上箭头</strong>：选中插入点与文稿开头之间的文本。</li>
<li><strong>Shift-Command–下箭头</strong>：选中插入点与文稿末尾之间的文本。</li>
<li><strong>Shift-Command–左箭头</strong>：选中插入点与当前行行首之间的文本。</li>
<li><strong>Shift-Command–右箭头</strong>：选中插入点与当前行行尾之间的文本。</li>
<li><strong>Shift–上箭头</strong>：将文本选择范围扩展到上一行相同水平位置的最近字符处。</li>
<li><strong>Shift–下箭头</strong>：将文本选择范围扩展到下一行相同水平位置的最近字符处。</li>
<li><strong>Shift–左箭头</strong>：将文本选择范围向左扩展一个字符。</li>
<li><strong>Shift–右箭头</strong>：将文本选择范围向右扩展一个字符。</li>
<li><strong>Option–Shift–上箭头</strong>：将文本选择范围扩展到当前段落的段首，再按一次则扩展到下一段落的段首。</li>
<li><strong>Option–Shift–下箭头</strong>：将文本选择范围扩展到当前段落的段尾，再按一次则扩展到下一段落的段尾。</li>
<li><strong>Option–Shift–左箭头</strong>：将文本选择范围扩展到当前字词的词首，再按一次则扩展到后一字词的词首。</li>
<li><strong>Option–Shift–左箭头</strong>：将文本选择范围扩展到当前字词的词尾，再按一次则扩展到后一字词的词尾。</li>
<li><strong>Control–A</strong>：移至行或段落的开头。</li>
<li><strong>Control–E</strong>：移至行或段落的末尾。</li>
<li><strong>Control–F</strong>：向前移动一个字符。</li>
<li><strong>Control–B</strong>：向后移动一个字符。</li>
<li><strong>Control–L</strong>：将光标或所选内容置于可见区域中央。</li>
<li><strong>Control–P</strong>：上移一行。</li>
<li><strong>Control–N</strong>：下移一行。</li>
<li><strong>Control–O</strong>：在插入点后新插入一行。</li>
<li><strong>Control–T</strong>：将插入点后面的字符与插入点前面的字符交换。</li>
<li><strong>Command–左花括号 ({)</strong>：左对齐。</li>
<li><strong>Command–右花括号 (})</strong>：右对齐。</li>
<li><strong>Shift-Command–竖线 (|)</strong>：居中对齐。</li>
<li><strong>Option-Command-F</strong>：前往搜索栏。</li>
<li><strong>Option-Command-T</strong>：显示或隐藏应用中的工具栏。</li>
<li><strong>Option-Command-C</strong>：拷贝样式：将所选项的格式设置拷贝到剪贴板。</li>
<li><strong>Option-Command-V</strong>：粘贴样式：将拷贝的样式应用到所选项。</li>
<li><strong>Option-Shift-Command-V</strong>：粘贴并匹配样式：将周围内容的样式应用到粘贴在该内容中的项目。</li>
<li><strong>Option-Command-I</strong>：显示或隐藏检查器窗口。</li>
<li><strong>Shift-Command-P</strong>：页面设置：显示用于选择文稿设置的窗口。</li>
<li><strong>Shift-Command-S</strong>：显示“存储为”对话框或复制当前文稿。</li>
<li><strong>Shift-Command-减号 (-)</strong>：缩小所选项。</li>
<li><strong>Shift-Command-加号(+)</strong>：放大所选项。Command–等号 (=) 可实现相同的功能。</li>
<li><strong>Shift-Command–问号 (?)</strong>：打开“帮助”菜单。</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法大全</title>
    <url>/2020/04/16/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Markdown-是什么"><a href="#Markdown-是什么" class="headerlink" title="Markdown 是什么"></a>Markdown 是什么</h1><p>Markdown 是一种轻量级标记语言，在很多平台上都有使用，它允许人们使用易读易写的纯文本格式编写文档，在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档，编写的文档后缀为 .md, .markdown。</p>
<h1 id="markdown-基本语法"><a href="#markdown-基本语法" class="headerlink" title="markdown 基本语法"></a>markdown 基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p>Markdown 可以使用以下几种字体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure>

<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">*****</span><br><span class="line">- - -</span><br><span class="line">----------</span><br></pre></td></tr></table></figure>

<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RUNOOB.COM</span><br><span class="line">GOOGLE.COM</span><br><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure>

<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML标签来实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure>

<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。Markdown 脚注的格式如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[^要注明的文本]</span><br><span class="line">以下实例演示了脚注的用法：</span><br></pre></td></tr></table></figure>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在当前行的结尾加 2 个空格<br>这行就会新起一行</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。<br>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<p>有序列表使用数字并加上 . 号来表示,如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>
<p>列表嵌套只需在子列表中的选项添加四个空格即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>

<h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p>
<blockquote>
<p>区块引用</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&#39;RUNOOB&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line">或者&lt;链接地址&gt;</span><br></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 图片语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure>
<p>开头一个感叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>
<h2 id="支持的HTML元素"><a href="#支持的HTML元素" class="headerlink" title="支持的HTML元素"></a>支持的HTML元素</h2><p>目前支持的 HTML 元素有<br><code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Del&lt;&#x2F;kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**文本加粗** </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br></pre></td></tr></table></figure>
<p>支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">&#96;   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure>
<h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 &#x3D;  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>css利用mask实现奇葩形状</title>
    <url>/2016/11/21/css%E5%88%A9%E7%94%A8mask%E5%AE%9E%E7%8E%B0%E5%A5%87%E8%91%A9%E5%BD%A2%E7%8A%B6/</url>
    <content><![CDATA[<p>我们在写前端样式的时候，css中实现不规则的图片可以利用border，或者clip-path（<a href="http://www.jianshu.com/p/1c241fdca3a1" target="_blank" rel="noopener">之前文章</a>介绍过），今天来说说另一种方法，也是比较简单的，可以实现各种奇葩形状，秀各种百变图片，照例先上张效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-4a74e287b32b09da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="效果图.png"></p>
<a id="more"></a>

<p>“mask-image”看着“图片”：“你想变啊！图片，你要是想变的话你就来找我嘛，你不找我怎么知道你想变呢？固然你不太懂跟我怎么相处，然则你照旧得找我，我会带你的嘛，不相处你说你想变我不给你变，你不想变我也不给你变，要讲沟通嘛！你想改头换面就来找我，我肯定给你想要的诶，你是真的想整型吧？”。<br>——题记，改编源自《大话西游之仙履奇缘》</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>我们在写前端样式的时候，css中实现不规则的图片可以利用border，或者clip-path（<a href="http://www.jianshu.com/p/1c241fdca3a1" target="_blank" rel="noopener">之前文章</a>介绍过），今天来说说另一种方法，也是比较简单的，可以实现各种奇葩形状，秀各种百变图片，照例先上张效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-4a74e287b32b09da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="效果图.png"></p>
<p>这个css可以怎么实现，之前的“我”说“clip-path”，本文的“我”当然说“mask-image”。mask-image，也就是遮罩图片的意思，它的作用相当于利用PS的alpha通道。一张原图，一张需要显示的区域图，两个结合在一起，就显示为“区域图形状的原图”。且看：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-a5294b1788eb9d72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="原图"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-f44619493ce9e7ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="frame.png，非JPG格式"></p>
<p>然后使用mask-image属性，读取遮罩图片透明信息，应用到元素图片上，如 -webkit-mask-image: url(../images/frame.png);</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-3c4bd2f2b9d4759e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="mask-image结合图"></p>
<p>一行代码，一张图片，我们就可以看到效果图了，这样够了么？当然不够。有时候在iphone7显示会有点问题，可能会导致重复性，保险起见，最好设置mask-size: 宽度 高度 及mask-repeat: no-repeat，这个跟background很相似，同样可以简写。<br>然后到这里完了么？点点头：完了。反问：真的完了？眼尖的人可能发现，好像跟效果图不太一样，呀，少了边框。这个边框怎么处理，我们换个思路就可以解决了，平时常用的一个方法，外面套个标签，设置下background，外级图片如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-aa29499f3b1112ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="边框.png"></p>
<p>over，附上最终代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*html*&#x2F;</span><br><span class="line">&lt;div class&#x3D;&quot;pic-frame&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;pic&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*css*&#x2F;</span><br><span class="line">.pic-frame &#123;</span><br><span class="line">	width: 564px;</span><br><span class="line">	height: 732px;</span><br><span class="line">	margin: auto;</span><br><span class="line">  	background-image: url(..&#x2F;images&#x2F;frame3.png);</span><br><span class="line">  	background-repeat: no-repeat;</span><br><span class="line">  	background-size: contain;</span><br><span class="line">&#125;</span><br><span class="line">.pic &#123;</span><br><span class="line">	width: 564px;</span><br><span class="line">	height: 732px;</span><br><span class="line">	background: url(..&#x2F;images&#x2F;pic.jpg) no-repeat center;</span><br><span class="line">	background-size: cover;</span><br><span class="line">    &#x2F;*background-image: url(..&#x2F;images&#x2F;pic.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    background-position: center;*&#x2F;</span><br><span class="line">    -webkit-mask: url(..&#x2F;images&#x2F;frame2.png) no-repeat;</span><br><span class="line">    -webkit-mask-size: 564px 732px ;</span><br><span class="line">&#x2F;*	-webkit-mask-size: 564px 732px ;</span><br><span class="line">    -webkit-mask-image: url(..&#x2F;images&#x2F;frame2.png);</span><br><span class="line">    -webkit-mask-repeat: no-repeat;*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果实现，不过这个属性还没有写进w3c里，webkit内核可以使用，基本包括了移动端，具体也可看<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask" target="_blank" rel="noopener">MDN</a>的介绍。个人觉得颇有意思的属性，来实现各种奇葩形状~</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css实现progress进度条美化</title>
    <url>/2017/03/17/css%E5%AE%9E%E7%8E%B0progress%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>当我们给元素做动画的时候，可能会用到steps，把多个图片拼合成一张雪碧图，改变background-position进行动画，简便而又强大的属性。如同变形金刚，“卡卡卡”，而有时又被它搞得一愣一愣的，咦，咋没看到最后一张图。用归用，不由疑惑steps到底是个什么鬼？索性来了解一下。</p>
<a id="more"></a>

<p>“我要一步一步往前跳，在最远方乘着web往前飞；<br>小小的天……我有属于我的天”<br>——题记，改编源自《蜗牛》</p>
<p>###正文<br>当我们给元素做动画的时候，可能会用到steps，把多个图片拼合成一张雪碧图，改变background-position进行动画，简便而又强大的属性。如同变形金刚，“卡卡卡”，而有时又被它搞得一愣一愣的，咦，咋没看到最后一张图。用归用，不由疑惑steps到底是个什么鬼？索性来了解一下。</p>
<p><strong>语法</strong></p>
<blockquote>
<p>steps(number, direction)<br>//number指间隔数，必须为正整数，必选<br>//directoin接受start和end值，指定在每个间隔的起点或是终点发生阶跃变化，默认end，可选</p>
</blockquote>
<p><em>steps</em>作为<code>timing-function</code>的一个属性，将操作的区域划分为相同等分的间隔，也就是说<strong>每步</strong>分成n段，注意，这里是步，不是共。比如说0，50%，100%，则会0<del>50%分成n步，50%</del>100%分成n步。上2张<a href="https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property" target="_blank" rel="noopener">W3C</a>上对于steps图文并茂的介绍：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-6742b6f9f557429c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="w3c关于steps的介绍文字"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-bb3ba9d25bb4c184.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="w3c关于steps的介绍图例"></p>
<p>可能我们看了还是不太清楚，直接上例子：<br>比如说小鸟啄地的3帧动画，用steps实现，改变background-position切换。<br><img src="http://upload-images.jianshu.io/upload_images/2320147-89b316452664160a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原图.png"></p>
<p>看代码：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-c533016b1de03a55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p>
<p>steps(2, start)效果如下，仅在鸟2鸟3中切换（鸟1咋不见了）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-1c0265bc2e69ef11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鸟2.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-561efc1832d4a195.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鸟3.png"></p>
<p>而steps(2,end)或者steps(2)，仅在鸟1鸟2中切换（鸟3咋不见了）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-7b15664d882fdc53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鸟1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-1c0265bc2e69ef11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鸟2.png"></p>
<p>（代码放在了<a href="http://codepen.io/smilewalker/pen/QGXZxP" target="_blank" rel="noopener">codepen上</a>，可远观可亵玩，看看是不是我说的这个事儿。）</p>
<p>为啥，我们以w3c的线图来解读。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-623875c3066a7d78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="steps(2, start)"></p>
<p>因为只有一个100%，steps 的<code>2</code>将该动画分成2步，当选择start时，也就是刚开始的时候0s一跳跳到1，相当于作为一个跃点，完成阶跃，这一切来的那么快，以至于我看不见，所以我们看到的就是鸟2鸟3不断切换。</p>
<p>接下来切换end：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-6c8f3b886df0ff2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="steps(2, end)"></p>
<p>当跃点为end时，则动画在终点发生阶跃，也就是说最后一步的最后一点，这一瞬间猝不及防，致使我啥也都看不见。steps的默认状态是end。这也就导致平时我们可能会产生这样的错觉：它不会运行到最后一张，事实上是有，但阶跃的我压根看不到。但是，我们可以利用forwards来查看，发现它最后定的图是鸟3，如果infinite无限循环，鸟3的毛还是看不到的。</p>
<p><strong>解决方法</strong><br>方法1：在多张图片拼合的成果图（雪碧图）的末尾或开头处再加一张一样大小的空白图，如此便解决了。有时候可能加跟第一张或第一张一样的图，具体问题具体分析~<br>方法2： 图还是原始图，改变动画keyframes，需要多加一步50%。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@-webkit-keyframes stepsA &#123;</span><br><span class="line">	50% &#123; background-position: 0 100%; &#125;</span><br><span class="line"></span><br><span class="line">	to &#123; background-position: 0 0; &#125;</span><br><span class="line">	&#x2F;*to &#123; background-position: 0 100%; &#125;*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>猜想</strong>：<br>step-start， start-end显示的是啥？<br>step-start = start(1, start)<br>step-end = start(1, end)</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-254f7453336081ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回顾"></p>
<p>可以动手试一试~<a href="http://codepen.io/smilewalker/pen/QGXZxP" target="_blank" rel="noopener">答案，别戳我</a></p>
<p>参考文章：<br><a href="https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property" target="_blank" rel="noopener">https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function</a><br><a href="https://idiotwu.me/understanding-css3-timing-function-steps/" target="_blank" rel="noopener">https://idiotwu.me/understanding-css3-timing-function-steps/</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css之神奇的渐变效果</title>
    <url>/2017/01/13/css%E4%B9%8B%E7%A5%9E%E5%A5%87%E7%9A%84%E6%B8%90%E5%8F%98%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>最近发现css3渐变无敌，边边角角利用<code>linear-gradient</code>或者<code>radial-gradient</code>也可以实现，如下图，包括之前所讲的<a href="http://www.jianshu.com/p/8570433e3669" target="_blank" rel="noopener"> CSS3 | 制作文字波浪线效果 </a>一文也有谈到：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-1adaee5592d8c46d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="Paste_Image.png"></p>
<a id="more"></a>

<blockquote>
<p>“你以为你这么低调我就找不到你了吗？没有用的，像你这样拉风的属性，只要有你在的地方，就好像黑夜中的萤火虫一样，那样的鲜明，那样的出众；你那委婉的形状，奇特的写法，神乎其技的思路，还有那百转千回……都深深地迷住了我。”<br>——题记，改自《国产凌凌漆》</p>
</blockquote>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>最近发现css3渐变无敌，边边角角利用<code>linear-gradient</code>或者<code>radial-gradient</code>也可以实现，如下图，包括之前所讲的<a href="http://www.jianshu.com/p/8570433e3669" target="_blank" rel="noopener"> CSS3 | 制作文字波浪线效果 </a>一文也有谈到：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-1adaee5592d8c46d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="Paste_Image.png"></p>
<h5 id="1-linear-gradient"><a href="#1-linear-gradient" class="headerlink" title="1. linear-gradient"></a>1. linear-gradient</h5><p><strong>语法</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-f6c218d4fb4c9960.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引自MDN"></p>
<blockquote>
<side-or-corner>
描述渐变线的起始点位置。它包含两个关键词：第一个指出垂直位置left or right，第二个指出水平位置top or bottom。关键词的先后顺序无影响，且都是可选的。to top, to bottom, to left 和 to right这些值会被转换成角度0度、180度、270度和90度。其余值会被转换为一个以向顶部中央方向为起点顺时针旋转的角度。**渐变线的结束点与其起点中心对称**。
<angle>
用角度值指定渐变的方向（或角度）。 See [<angle>](https://developer.mozilla.org/zh-CN/docs/Web/CSS/angle).
<color-stop>
由一个[ <color>](https://developer.mozilla.org/zh-CN/docs/Web/CSS/color_value)值组成，并且跟随着一个可选的终点位置（可以是一个百分比值或者是沿着渐变轴的[<length>](https://developer.mozilla.org/zh-CN/docs/Web/CSS/length)）。
</blockquote>
<p>比如说<code>linear-gradient( 45deg, blue, red )</code>，效果如下，具体用法可以看下<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient" target="_blank" rel="noopener"> MDN </a> 或者W3C。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-6107658627622bb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图例"></p>
<p>再来看<code>background: linear-gradient(135deg, transparent 50%, red );</code><br><img src="http://upload-images.jianshu.io/upload_images/2320147-e4b52f62af5fbc84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="图例"></p>
<p>如此一来，那实现刚开始的第一张效果图，可有想法？<br>我们继续看<code>background: linear-gradient(135deg, transparent 15px, red 0)</code>：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-30cbdbf68818e21f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例"></p>
<p>而background是允许有多背景的，结合<code>background-size</code>（避免渐变图案覆盖）， <code>background-repeat</code>（避免渐变图案平铺），利用<code>background-position</code>设置图片位置，最终第一张效果图实现代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.bevel &#123;</span><br><span class="line">	width: <span class="number">10</span>rem;</span><br><span class="line">	height: <span class="number">10</span>rem;</span><br><span class="line">	margin: <span class="number">30</span>px auto;</span><br><span class="line">	background: #58a;</span><br><span class="line">	background: linear-gradient(135deg, transparent 15px, #6cc 0) top left, linear-gradient(-135deg, transparent 15px, #6cc 0) top right,linear-gradient(-45deg, transparent 15px, #6cc 0) bottom right, linear-gradient(45deg, transparent 15px, #6cc 0) bottom left;</span><br><span class="line">	background-size: <span class="number">50</span>% <span class="number">50</span>%;</span><br><span class="line">	background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/2320147-1e4a436da663f3ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图.png"></p>
<h5 id="2-radial-gradient"><a href="#2-radial-gradient" class="headerlink" title="2. radial-gradient"></a>2. radial-gradient</h5><p><strong>语法</strong></p>
<blockquote>
<p>// 定义结束的形状<br>radial-gradient( circle, … ) /* Synonym of radial-gradient( circle farthest-corner, … ) */<br>radial-gradient( ellipse, … ) /* Synonym of radial-gradient( ellipse farthest-corner, … ) */<br>radial-gradient( <extent-keyword>, … ) /* It draws a circle */<br>radial-gradient( circle radius, … ) /* A centered circle of the given length. It can’t be a percentage */<br>radial-gradient( ellipse x-axis y-axis, … ) /* The two semi-major axes are given, horizontal, then vertical */<br>// 定义形状的位置<br>radial-gradient ( … at <position>, … )// Definition of the color stops<br>radial-gradient ( …, <color-stop>, … )<br>radial-gradient ( …, <color-stop>, <color-stop> )</p>
</blockquote>
<p>了解了radial-gradient的语法后，实质上实现边角的道理跟linear-gradient是一样样的。</p>
<p>具体就不说了，直接看第二张图效果的代码，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.concave &#123;</span><br><span class="line">	width: <span class="number">10</span>rem;</span><br><span class="line">	height: <span class="number">10</span>rem;</span><br><span class="line">	margin: <span class="number">30</span>px auto;</span><br><span class="line">	background: #58a;</span><br><span class="line">	background: radial-gradient(circle at top left, transparent 15px, #58a 0) top left, radial-gradient(circle at top right, transparent 15px, #58a 0) top right, radial-gradient(circle at  bottom right, transparent 15px, #58a 0) bottom right, radial-gradient(circle at bottom left, transparent 15px, #58a 0) bottom left;</span><br><span class="line">	background-size: <span class="number">50</span>% <span class="number">50</span>%;</span><br><span class="line">	background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>了解了这个奇特的用法，你是不是可以创造出更多有意思的形状呢~<br>暂此，敬请交流~</p>
<p><em>参考文章</em><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-image" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-image</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Background_and_Borders/Using_CSS_multiple_backgrounds</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css美化scrollbar滚动条</title>
    <url>/2016/12/26/css%E7%BE%8E%E5%8C%96scrollbar%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
    <content><![CDATA[<p>在布局页面样式的时候，可能会遇到显示滚动条的需要，默认滚动条样式普通也不具备自认为的美感，想打造自己的滚动条，咋破？按例我们先上效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-7a6b0a82851599a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p>
<a id="more"></a>

<p>-webkit-scrollbar：“你要知道美容这个东西，跟鲜花一样需要有绿叶来衬托才会显出她的娇媚。”<br>——题记，源自《唐伯虎点秋香》</p>
<p>###正文<br>在布局页面样式的时候，可能会遇到显示滚动条的需要，默认滚动条样式普通也不具备自认为的美感，想打造自己的滚动条，咋破？按例我们先上效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-7a6b0a82851599a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p>
<p>看起来这个效果，是相当简单呀，没啥难度，原始效果是怎样呢？我们也一起来看下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-9bb47fc7e2b21584.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原始图"></p>
<p>效果图与原始图相比，变化的有：上下箭头，滑块样式及轨道。咋变？在这里，我们介绍下scrollbar的朋友：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar 滚动条整体部分</span><br><span class="line">::-webkit-scrollbar-button 滚动条两端的按钮</span><br><span class="line">::-webkit-scrollbar-track 外层轨道</span><br><span class="line">::-webkit-scrollbar-track-piece 内层轨道，即外层轨道除去拖动滑块</span><br><span class="line">::-webkit-scrollbar-thumb 拖动滑块</span><br><span class="line">::-webkit-scrollbar-corner 边角</span><br><span class="line">::-webkit-resizer 定义右下角拖动块的样式</span><br></pre></td></tr></table></figure>
<p>下面是部分相对应的图例，加深印象：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-e333a1f51b8f587d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例"></p>
<p>以及伪元素，其中start与end偶尔可能用得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:horizontal</span><br><span class="line">:vertical</span><br><span class="line">:decrement</span><br><span class="line">:increment</span><br><span class="line">:start</span><br><span class="line">:end </span><br><span class="line">:double-button</span><br><span class="line">:single-button</span><br><span class="line">:no-button</span><br><span class="line">:corner-present</span><br><span class="line">:window-inactive</span><br></pre></td></tr></table></figure>
<p>属性视情况而定，一般美化样式<br>::-webkit-scrollbar 滚动条整体部分<br>::-webkit-scrollbar-track 外层轨道<br>::-webkit-scrollbar-thumb 拖动滑块<br>这三个够了，基本都可以满足，其他看自己需求。使用前期准备的话，相信应该都知道，需要添加<em>overflow-x/overflow-y/overflow: scroll 及 定高</em>。<br>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.txt-wrap &#123;</span><br><span class="line">	width: 25rem;</span><br><span class="line">	height: 20rem;</span><br><span class="line">	margin: auto;</span><br><span class="line">	padding: 10px 20px 10px 20px;</span><br><span class="line">	background-color: #fcc;</span><br><span class="line">	overflow-y: scroll;</span><br><span class="line">	line-height: 30px;</span><br><span class="line">	text-align: left;</span><br><span class="line">	font-family: &#39;microsoft yahei&#39;;</span><br><span class="line">&#125;</span><br><span class="line">.txt-wrap::-webkit-scrollbar &#123;</span><br><span class="line">    width: 10px;</span><br><span class="line">    background-color: rgba(213,213,213,.8);</span><br><span class="line">&#125;</span><br><span class="line"> .txt-wrap::-webkit-scrollbar-track &#123;</span><br><span class="line">    background-color: rgba(213,213,213,.8);</span><br><span class="line">    border-radius: .5rem;</span><br><span class="line">&#125;</span><br><span class="line"> .txt-wrap::-webkit-scrollbar-thumb &#123;</span><br><span class="line"> 	&#x2F;*width: 30px;*&#x2F;</span><br><span class="line">    background-color: #969696; </span><br><span class="line">    border-radius: .5rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.txt-wrap::-webkit-scrollbar-button:start &#123;</span><br><span class="line">	width: 100%;</span><br><span class="line">	height: auto;</span><br><span class="line">	background: url(..&#x2F;images&#x2F;top.png) no-repeat;</span><br><span class="line">	background-size: contain;</span><br><span class="line">&#125;</span><br><span class="line">.txt-wrap::-webkit-scrollbar-button:end &#123;</span><br><span class="line">	width: 100%;</span><br><span class="line">	height: auto;</span><br><span class="line">	background: url(..&#x2F;images&#x2F;down.png) no-repeat;</span><br><span class="line">	background-size: contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>scrollbar属性目前并不通用，一般用于webkit较多，移动端可用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-a45d20ffa74c4de3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="适用"></p>
<p>参考链接：<br><a href="https://css-tricks.com/custom-scrollbars-in-webkit/" target="_blank" rel="noopener">https://css-tricks.com/custom-scrollbars-in-webkit/</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css读懂margin</title>
    <url>/2016/12/13/css%E8%AF%BB%E6%87%82margin/</url>
    <content><![CDATA[<p>在接触margin的时候，知道它是个外边距，用来距离其他元素的名词。当遇到margin没达到效果的时候，那就用padding，实现效果还不容易。可是，你就不想知道为什么没有出现想要的效果，这到底为啥？今天便来总结一番，一个一个来。<br>先上html，看下web结构：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-5f2ba2b0a6daa2c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="html结构"></p>
<a id="more"></a>

<p>“margin，我开始明白你的内心了。以前我看效果都是用肉眼来看，但是在我理解的那一刹那，我开始用更深的逻辑来理解页面展示，所有的元素排布真的可以看的深入原理般的清楚……原来你也有里层的绕指柔”<br>——题记，改编源自《大圣娶亲》</p>
<p>###正文<br>在接触margin的时候，知道它是个外边距，用来距离其他元素的名词。当遇到margin没达到效果的时候，那就用padding，实现效果还不容易。可是，你就不想知道为什么没有出现想要的效果，这到底为啥？今天便来总结一番，一个一个来。<br>先上html，看下web结构：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-5f2ba2b0a6daa2c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="html结构"></p>
<p>好的，我们先来看margin为0的情况，正常，木有空隙：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-9d5db650106761e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1.margin全为0"></p>
<p>然后设置第一个p为margin-top:1rem情况：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-edab0ad1e0afa9af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2.第一个p为margin-top: 1rem;"></p>
<p>section为margin-top: 1rem的情况，也就是p的父容器：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-edab0ad1e0afa9af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图3.section为margin-top: 1rem;"></p>
<p>有没有发现图2和图3是一样的，继续看section和第一个p的margin-top: 1rem的情况：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-edab0ad1e0afa9af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图4.section和第一个p为margin-top: 1rem"></p>
<p>图2,3,4间距是一样的，继续看section为1rem，第一个p为2rem：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-94ad0d9ecb83408a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图5.section margin-top: 1rem；和第一个p为 margin-top: 2rem；"></p>
<p>发现事实上显示结果是父容器与第一个子元素的margin-top值是最大的那个值，也就是例子的2rem。看第一二两个p的margin-top值为1rem：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-067e9d2184cc086b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图6.一二两个p“margin”为margin-top: 1rem;"></p>
<p>并无特别，继续看第一个p的margin-top：1rem；margin-bottom：1rem：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-e96a763a4479ef09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图7.第一个p：margin上下值为1rem"></p>
<p>设置第二个p的margin-top: 1rem</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-466ffa9d0474ae0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图8.第一个p为margin-top: 1rem; margin-bottom: 1rem; 第2个p为margin-top: 1rem; "></p>
<p>发现第一个p的margin-bottom跟第二个p的margin-top合并成一个，改变第二个的margin-top值为2rem：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-e75c9f7002a10f00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图9.第一个p为margin-top: 1rem; margin-bottom: 1rem; 第二个p为margin-top: 2rem;"><br>发现事实上显示的是2rem，显示最大的那个值，咋说，我们可以发现：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-2be6bc591eeda352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图10.两个同级元素的外边距合并"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-77300536fbe2883d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图11.父元素与第一个子元素外边距合并"></p>
<p>而如果其中有负值，则是两个margin值的相加，而不是取最大值。</p>
<p>【只有普通文档流中块框的垂直外边距才会发生合并，行内框、浮动框或绝对定位之间的外边距不会合并。】解决方法：利用padding来代替margin，或巧妙的利用margin值，或改为行内元素，或采用同一方向的margin，或浮动元素等</p>
<p>还有一点，margin若设为百分比值，相对的参照物是其父元素的宽度，这个不知道的话开发的时候可能会有坑，本文运行环境是chrome，以及不同浏览器的margin的坑是不一样的，这个网上的<a href="http://www.hicss.net/do-not-tell-me-you-understand-margin/" target="_blank" rel="noopener">一篇文章</a>写的还是可以参考的。</p>
<p>该篇文章主要说明垂直外边距的合并，可能在你遇到问题的时候印象会深些，不过本文还是一步步把它写出来，如果你在某个时刻看到，知道，诶，原来margin还有这样的一面，那这篇文章也就开心了~</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>css</tag>
        <tag>margin</tag>
      </tags>
  </entry>
  <entry>
    <title>css搞定input-checkbox的美化</title>
    <url>/2016/12/24/css%E6%90%9E%E5%AE%9Ainput-checkbox%E7%9A%84%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>写H5有时候遇到要打勾选择，比如说同意XXX，已阅读XXX啥的，而本人又不太想用图片切换，第一个就想到checkbox，而默认的样式又不是那么合意，总想设计自己的效果，抓耳挠腮，咋弄？今天我们便来解决这个问题，移动端H5，按例上效果图：</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-dd562467ad1f0a5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="效果图"></p>
<a id="more"></a>

<h3 id="开头语"><a href="#开头语" class="headerlink" title="开头语"></a>开头语</h3><p>“web, 我觉得刚才秀的姿势不够纠结，缺乏了一点点内涵，无法表现input内心的复杂情感，请允许我再来一次，我会拿出百分百的状态，争取做到深刻而不深沉，平淡而不平庸，演好我的角色。其实，我是一名演员。”<br>—— 改编源自《喜剧之王》</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>写H5有时候遇到要打勾选择，比如说同意XXX，已阅读XXX啥的，而本人又不太想用图片切换，第一个就想到checkbox，而默认的样式又不是那么合意，总想设计自己的效果，抓耳挠腮，咋弄？今天我们便来解决这个问题，移动端H5，按例上效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-dd562467ad1f0a5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="效果图"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-c74aad3cba988b7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="效果图.png"></p>
<p>交互效果是当用户点击文字行或者圈圈，都可以选择打钩或去掉钩，多选框或单选框效果。</p>
<p>咋实现，一步一步来，先来个最基本的样子：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-c80edd25a0651877.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="原图"></p>
<p>怎么让选择框变美，首先，身材比例调一下（width，height），瞬间小家碧玉变得大气：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-d1fc6b67b403e883.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="Paste_Image.png"></p>
<p>然后稍微的隆一下border-radius，变得温婉些，前提要加上-webkit-appearance: none，才能改变：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-7a9ee7e20f6ecc52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="Paste_Image.png"></p>
<p>这时候选中效果是看不见的，因为默认样式已经去除，接下来修整下选中的状态，对勾怎么弄，利用隐士Unicode编码。’\2713’代表对钩，利用content来加入，并改变位置，颜色，实现了自我的展示。<br>主样式代码如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-831eea27eb2cfcd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p>
<p>主要是-webkit-appearance: none以及利用unicode编码，伪元素实现。</p>
<p>附上最终代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">		.input-wrap &#123;</span><br><span class="line">			width: 20rem;</span><br><span class="line">			height: 10rem;</span><br><span class="line">			padding-top: 5rem;</span><br><span class="line">			margin: auto;</span><br><span class="line">			background-color: #f99;</span><br><span class="line">			color: #fff;</span><br><span class="line">			text-align: center;</span><br><span class="line">			font-size: 23px;</span><br><span class="line">		&#125;</span><br><span class="line">		input[type&#x3D;&#39;checkbox&#39;] &#123;</span><br><span class="line">			position: relative;</span><br><span class="line">			width: 20px;</span><br><span class="line">			height: 20px;</span><br><span class="line">	        -webkit-appearance: none;</span><br><span class="line">	        margin-right: 10px;</span><br><span class="line">	        border: 2px solid #fff;</span><br><span class="line">	        border-radius: 50%;</span><br><span class="line">	    &#125;</span><br><span class="line">&#x2F;*	    input[type&#x3D;&#39;checkbox&#39;]:checked &#123;</span><br><span class="line">	        clip: (0,0,0,0);</span><br><span class="line">	        outline: 0;</span><br><span class="line">	        background-color: transparent;</span><br><span class="line">	    &#125;*&#x2F;</span><br><span class="line">	    input[type&#x3D;&#39;checkbox&#39;]:checked:after &#123;</span><br><span class="line">	        content: &#39;\2713&#39;;</span><br><span class="line">	        position: absolute;</span><br><span class="line">	        left: 3px;</span><br><span class="line">	        color: #fff;</span><br><span class="line">	        -webkit-appearance: none;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">	&lt;&#x2F;style&gt;</span><br><span class="line">---html---</span><br><span class="line">	&lt;div class&#x3D;&quot;input-wrap&quot;&gt;</span><br><span class="line">		&lt;label class&#x3D;&quot;btn-admit admit&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;save-in&quot; name&#x3D;&quot;saveIn&quot; checked&#x3D;&quot;checked&quot; value&#x3D;&quot;Bike&quot; &#x2F;&gt;我愿意 Yes,I do&lt;&#x2F;label&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>题外话，unicode编码还是很有用的，比如说实现下面的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-52f810d6831a77d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-401a635697b5a3b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="正确.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-8a176b42fec3ae11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="unicode源自网络"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css读懂动画steps</title>
    <url>/2016/12/29/css%E8%AF%BB%E6%87%82%E5%8A%A8%E7%94%BBsteps/</url>
    <content><![CDATA[<p>当我们给元素做动画的时候，可能会用到steps，把多个图片拼合成一张雪碧图，改变background-position进行动画，简便而又强大的属性。如同变形金刚，“卡卡卡”，而有时又被它搞得一愣一愣的，咦，咋没看到最后一张图。用归用，不由疑惑steps到底是个什么鬼？索性来了解一下。</p>
<a id="more"></a>

<p>“我要一步一步往前跳，在最远方乘着web往前飞；<br>小小的天……我有属于我的天”<br>——题记，改编源自《蜗牛》</p>
<p>###正文<br>当我们给元素做动画的时候，可能会用到steps，把多个图片拼合成一张雪碧图，改变background-position进行动画，简便而又强大的属性。如同变形金刚，“卡卡卡”，而有时又被它搞得一愣一愣的，咦，咋没看到最后一张图。用归用，不由疑惑steps到底是个什么鬼？索性来了解一下。</p>
<p><strong>语法</strong></p>
<blockquote>
<p>steps(number, direction)<br>//number指间隔数，必须为正整数，必选<br>//directoin接受start和end值，指定在每个间隔的起点或是终点发生阶跃变化，默认end，可选</p>
</blockquote>
<p><em>steps</em>作为<code>timing-function</code>的一个属性，将操作的区域划分为相同等分的间隔，也就是说<strong>每步</strong>分成n段，注意，这里是步，不是共。比如说0，50%，100%，则会0<del>50%分成n步，50%</del>100%分成n步。上2张<a href="https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property" target="_blank" rel="noopener">W3C</a>上对于steps图文并茂的介绍：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-6742b6f9f557429c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="w3c关于steps的介绍文字"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-bb3ba9d25bb4c184.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="w3c关于steps的介绍图例"></p>
<p>可能我们看了还是不太清楚，直接上例子：<br>比如说小鸟啄地的3帧动画，用steps实现，改变background-position切换。<br><img src="http://upload-images.jianshu.io/upload_images/2320147-89b316452664160a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原图.png"></p>
<p>看代码：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-c533016b1de03a55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p>
<p>steps(2, start)效果如下，仅在鸟2鸟3中切换（鸟1咋不见了）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-1c0265bc2e69ef11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鸟2.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-561efc1832d4a195.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鸟3.png"></p>
<p>而steps(2,end)或者steps(2)，仅在鸟1鸟2中切换（鸟3咋不见了）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-7b15664d882fdc53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鸟1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-1c0265bc2e69ef11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鸟2.png"></p>
<p>（代码放在了<a href="http://codepen.io/smilewalker/pen/QGXZxP" target="_blank" rel="noopener">codepen上</a>，可远观可亵玩，看看是不是我说的这个事儿。）</p>
<p>为啥，我们以w3c的线图来解读。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-623875c3066a7d78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="steps(2, start)"></p>
<p>因为只有一个100%，steps 的<code>2</code>将该动画分成2步，当选择start时，也就是刚开始的时候0s一跳跳到1，相当于作为一个跃点，完成阶跃，这一切来的那么快，以至于我看不见，所以我们看到的就是鸟2鸟3不断切换。</p>
<p>接下来切换end：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-6c8f3b886df0ff2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="steps(2, end)"></p>
<p>当跃点为end时，则动画在终点发生阶跃，也就是说最后一步的最后一点，这一瞬间猝不及防，致使我啥也都看不见。steps的默认状态是end。这也就导致平时我们可能会产生这样的错觉：它不会运行到最后一张，事实上是有，但阶跃的我压根看不到。但是，我们可以利用forwards来查看，发现它最后定的图是鸟3，如果infinite无限循环，鸟3的毛还是看不到的。</p>
<p><strong>解决方法</strong><br>方法1：在多张图片拼合的成果图（雪碧图）的末尾或开头处再加一张一样大小的空白图，如此便解决了。有时候可能加跟第一张或第一张一样的图，具体问题具体分析~<br>方法2： 图还是原始图，改变动画keyframes，需要多加一步50%。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@-webkit-keyframes stepsA &#123;</span><br><span class="line">	50% &#123; background-position: 0 100%; &#125;</span><br><span class="line"></span><br><span class="line">	to &#123; background-position: 0 0; &#125;</span><br><span class="line">	&#x2F;*to &#123; background-position: 0 100%; &#125;*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>猜想</strong>：<br>step-start， start-end显示的是啥？<br>step-start = start(1, start)<br>step-end = start(1, end)</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-254f7453336081ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回顾"></p>
<p>可以动手试一试~<a href="http://codepen.io/smilewalker/pen/QGXZxP" target="_blank" rel="noopener">答案，别戳我</a></p>
<p>参考文章：<br><a href="https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property" target="_blank" rel="noopener">https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function</a><br><a href="https://idiotwu.me/understanding-css3-timing-function-steps/" target="_blank" rel="noopener">https://idiotwu.me/understanding-css3-timing-function-steps/</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>js实现base64获图片url的坑-七牛云</title>
    <url>/2016/12/07/js%E5%AE%9E%E7%8E%B0base64%E8%8E%B7%E5%9B%BE%E7%89%87url%E7%9A%84%E5%9D%91-%E4%B8%83%E7%89%9B%E4%BA%91/</url>
    <content><![CDATA[<p>近期做H5项目的时候，遇到上传图片的问题：手机里拍摄后看着明明是正的照片，在H5显示之后，就上下左右“乱跳”了。究其原因是原始图片会有自己的参数，而相机当时的拍摄旋转方向不同，则会导致旋转参数不同，进而显示的图片方向不正。未来语：如果之后手机照片能自动设置的话，H5就省事不少了。<br><img src="http://upload-images.jianshu.io/upload_images/2320147-7e837ea6492a0fc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="H5显示图"></p>
<a id="more"></a>

<p>“Base64：数据界的云存储是个便利小器，某一天他踩着白色祥云来渡我，我猜中了前后，可是我却走岔了路。”<br>——题记，改编源自《大话西游》</p>
<p>###前文<br>近期做H5项目的时候，遇到上传图片的问题：手机里拍摄后看着明明是正的照片，在H5显示之后，就上下左右“乱跳”了。究其原因是原始图片会有自己的参数，而相机当时的拍摄旋转方向不同，则会导致旋转参数不同，进而显示的图片方向不正。未来语：如果之后手机照片能自动设置的话，H5就省事不少了。<br><img src="http://upload-images.jianshu.io/upload_images/2320147-7e837ea6492a0fc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="H5显示图"><br><img src="http://upload-images.jianshu.io/upload_images/2320147-4fb9c8406ecf732d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="H5理论图"><br>至于H5如何上传显示图片，可采取FileReader ，readAsDataURL() 读取指定File对象中的内容，利用exif获取旋转参数，目前自我总结ios是右1,左3,正6,倒8，这个可以自己测试看看，主要用法如下：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-8faa2f665f9e5cfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="部分读取图片代码"><br>读取图片及获得旋转参数这里不多说了，大致是获取旋转参数后，利用canvas重新生成一张图，得base64路径。不过需要canvas将图摆正，然后得到一个新的base64，获得旋转之后的新图base64。而有时候我们是需要使用这个图片路径的，总不可能用base64，太大，转换以下链接，也就有了下文，这里选择七牛进行转换。</p>
<p>###正文<br>base64转换七牛链接一般流程为：web请求后台接口 ——&gt; 后台返回数据，获取相应的token（上传权限）、key（文件名），urlTpl（文件的模板格式），这些参数建议后台生成 ——&gt; 请求七牛云空间地址，带上后台获取的key，以及添加HTTP请求头（content-type，Authorization身份验证带token），发送需转化的base64 url ——&gt; 获取responseText响应数据（来自七牛云），将传过来的key值带入之前的urlTpl模板，新url完成。代码如下，<a href="https://qiniu.kf5.com/hc/kb/article/69078/" target="_blank" rel="noopener">七牛云文档</a>也可以查看。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">putb64: function(token, key, urlTpl, imageBase64) &#123;</span><br><span class="line">	  var pic &#x3D; imageBase64.replace(&#x2F;^.*?,&#x2F;, &#39;&#39;);</span><br><span class="line">          var url &#x3D; location.protocol &#x3D;&#x3D; &#39;http:&#39; </span><br><span class="line">	          ? &quot;http:&#x2F;&#x2F;up.qiniu.com&#x2F;putb64&#x2F;-1&#x2F;key&#x2F;&quot; + key </span><br><span class="line">	          : &quot;https:&#x2F;&#x2F;up.qbox.me&#x2F;putb64&#x2F;-1&#x2F;key&#x2F;&quot; + key;</span><br><span class="line">	  var xhr &#x3D; new XMLHttpRequest();</span><br><span class="line">	  xhr.onreadystatechange&#x3D;function()&#123;</span><br><span class="line">	    if (xhr.readyState &#x3D;&#x3D; 4)&#123;</span><br><span class="line">	    	var response &#x3D; JSON.parse(xhr.responseText);</span><br><span class="line">	    	var result_url &#x3D; urlTpl.replace(&#39;%QiniuUploadImg%&#39;, response.key);</span><br><span class="line">	    	console.log(result_url)</span><br><span class="line">				$(&#39;#show&#39;).attr(&#39;src&#39;, result_url)</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  xhr.open(&quot;POST&quot;, url, true);</span><br><span class="line">	  xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application&#x2F;octet-stream&quot;);</span><br><span class="line">	  xhr.setRequestHeader(&quot;Authorization&quot;, &quot;UpToken &quot; + token);</span><br><span class="line">	  xhr.send(pic);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>这里有几个注意点：</p>
<ol>
<li>key值不要混淆；<br>最终的url 带的参数key是七牛返回的responseText的key，不是后台传过来的key，这个混淆了要找半天。</li>
<li>七牛地址分为http跟https，两个路径是不一样的，需要判断；</li>
<li>传过去的需要转换base64，须填写base64之后的字符串 ，除去MIME和base64以及逗号</li>
<li>UpToken 与后面的字符串保留一个空格 后跟上在服务端请求的token的字符串。</li>
</ol>
<p><a href="https://github.com/smilewalker/projects/tree/master/imgHandle" target="_blank" rel="noopener">github</a>上有部分代码，可以参考，不过七牛云要加上自己的七牛云地址，暂且先这些吧。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>JavaScript</tag>
        <tag>base64</tag>
        <tag>七牛云</tag>
      </tags>
  </entry>
  <entry>
    <title>js实现canvas画笔效果</title>
    <url>/2017/01/11/js%E5%AE%9E%E7%8E%B0canvas%E7%94%BB%E7%AC%94%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>“别看我只是支画笔，我有雄心志气高”，今天便来讲讲canvas的画笔。之前做H5 canvas绘画时，思考如何让画出来的线条有纹理，翻找半天找不出个所以然，机缘巧合得知有个<code>createPattern</code>属性，嘿，成了，效果图如下。索性总结下画笔的属性，列个大概。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-feef2756babfaa3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="纹理画笔"></p>
<a id="more"></a>
<p>“沧海一声唱  滔滔两岸潮<br>浮沉随浪歌舞今朝<br>苍天唱  纷纷世上潮<br>谁负谁胜出天知晓<br>江山唱  烟雨遥<br>涛浪淘尽红尘俗世几多娇<br>清风唱  竟惹寂寥<br>豪情还剩了一襟晚照<br>苍生唱  不再寂寥<br>豪情仍在痴痴唱唱”<br>—— 题记，《沧海一声唱》</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>在上文《js实现你的音乐》中，我们了解到Audio API简单的音频知识点，重在理论，今天搞点有趣的试验，偏重实践。大家知道，光有光谱，电磁波有频谱，音乐呢？当然也有自己的谱。想奥斯特实验揭示电流周围存在磁场，分散的铁屑显现磁铁的磁场分布，那音乐如何看到自身的频率，所以，本文的主题来了，音频可视化，让你的音乐浪起来。先附上效果图，接下来会主要围绕效果例子出发：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-ca71f849ca37bdf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="效果图.png"></p>
<p>这种音波似的效果，我们可能会在音乐室或音乐人或音乐播放器那儿看到，并不少见，当第一次发现可以实现时，ohMyGod，震撼，神奇，而对于喜欢的事物，总会想为我所用，闲话不多说，一起看看它是怎么实现的吧。根据已有的web audio API知识，实践音频可视化，自我总结，步骤大致分为以下几步：</p>
<ol>
<li>创建音频环境</li>
<li>获取音频，创建buffer节点</li>
<li>解码音频，分析音频</li>
<li>连接音频输入输出</li>
<li>canvas绘制频谱</li>
<li>连接播放</li>
</ol>
<h5 id="创建音频环境AudioContext"><a href="#创建音频环境AudioContext" class="headerlink" title="创建音频环境AudioContext"></a>创建音频环境AudioContext</h5><p>音频环境是所有音效操作的前提，好比canvas的画布，先有个做画之地，再来笔墨横姿</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Webkit&#x2F;blink browser require a prefix, and it needs the window object specifically declared to work in Safari</span><br><span class="line">window.AudioContext &#x3D; window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;</span><br><span class="line">window.requestAnimationFrame &#x3D; window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; declare new audio context</span><br><span class="line">try &#123;</span><br><span class="line">    var audioCtx &#x3D; new AudioContext();</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">    alert(&#39;Your browser does not support AudioContext!&#39;);</span><br><span class="line">    console.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获取音频，创建buffer节点"><a href="#获取音频，创建buffer节点" class="headerlink" title="获取音频，创建buffer节点"></a>获取音频，创建buffer节点</h5><p>首先获取音频，也就是说拿到这个素材输入之后，我们可以赶制加工，这里通过XMLHttpRequest获取，将请求的返回类型设为<strong>“arraybuffer”</strong>，方便音频数据处理；另外，创建音频节点<strong>createBufferSource</strong>，来获取输入的音频。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; use XHR to load an audio track, and</span><br><span class="line">&#x2F;&#x2F; decodeAudioData to decode it and stick it in a buffer.</span><br><span class="line">&#x2F;&#x2F; Then we put the buffer into the source</span><br><span class="line">var xhr &#x3D; new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化 HTTP 请求参数, 配置请求类型，文件路径等</span><br><span class="line">xhr.open(&#39;GET&#39;, &#39;audio&#x2F;music1.mp3&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将responseType设为arraybuffer,二进制数据</span><br><span class="line">xhr.responseType &#x3D; &quot;arraybuffer&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取完成，对音频进一步操作，解码</span><br><span class="line">xhr.onload &#x3D; function() &#123;</span><br><span class="line">    var audioData &#x3D; xhr.response;</span><br><span class="line">    &#x2F;&#x2F; Get an AudioBufferSourceNode.</span><br><span class="line">    &#x2F;&#x2F; This is the AudioNode to use when we want to play an AudioBuffer</span><br><span class="line">    var source &#x3D; audioCtx.createBufferSource();</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="解码音频，分析音频"><a href="#解码音频，分析音频" class="headerlink" title="解码音频，分析音频"></a>解码音频，分析音频</h5><p>好的，现在我们拿到了音乐，但计算机仍然不懂，需要对其进行解码<strong>decodeAudioData</strong>。<br>一看到解码后的数据，我们不能让计算机“啪啪啪”就来吧，观个全局，做个自我分析，<strong>createAnalyser</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">audioCtx.decodeAudioData(audioData, function(buffer) &#123;</span><br><span class="line">        &#x2F;&#x2F; set the buffer in the AudioBufferSourceNode</span><br><span class="line">        source.buffer &#x3D; buffer;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; create audio node to play the audio in the buffer</span><br><span class="line">        var analyser &#x3D; audioCtx.createAnalyser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="连接音频输入输出"><a href="#连接音频输入输出" class="headerlink" title="连接音频输入输出"></a>连接音频输入输出</h5><p>必经之路，input ——&gt; 音频处理 ——&gt; 输出，connect连接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; connect the analyser to the destination(the speaker), or we won&#39;t hear the sound</span><br><span class="line">&#x2F;&#x2F; from audioCtx.createBuffer, or audioCtx.decodeAudioData</span><br><span class="line">source.connect(analyser);</span><br><span class="line">analyser.connect(audioCtx.destination);</span><br></pre></td></tr></table></figure>

<h5 id="canvas绘制频谱"><a href="#canvas绘制频谱" class="headerlink" title="canvas绘制频谱"></a>canvas绘制频谱</h5><p>大头戏，音乐播放捣鼓捣鼓还是有声音的，频谱怎么着，一头雾水。不着急，慢慢来，首先我们需要数据，数据怎么来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bufferLength &#x3D; analyser.frequencyBinCount,</span><br><span class="line">    dataArray &#x3D; new Uint8Array(bufferLength);</span><br><span class="line"></span><br><span class="line">analyser.getByteFrequencyData(dataArray);</span><br></pre></td></tr></table></figure>

<p>好，数据有了，计算机也能懂，怎么画，先说个简单的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var canvas &#x3D; document.getElementById(&#39;audio_canvas&#39;),</span><br><span class="line">    ctx &#x3D; canvas.getContext(&quot;2d&quot;),</span><br><span class="line">    c_width &#x3D; canvas.width,</span><br><span class="line">    c_height &#x3D; canvas.height;</span><br><span class="line"></span><br><span class="line">**************</span><br><span class="line">for(var i &#x3D; 0; i &lt; bufferLength; i++) &#123;</span><br><span class="line">     value &#x3D; dataArray[i];</span><br><span class="line">     ctx.fillStyle &#x3D; &#39;#f99&#39;;</span><br><span class="line">     ctx.fillRect(i, c_height - value, 1, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了，频谱图有了，但没有动效，不会变化，别急，利用<strong>requestAnimationFrame</strong>，同时这侧面反应了获取的dataArray数组的数值，出来的效果如此这般：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-c4a900a3dbf48d0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="数值"></p>
<p>可是我们想，如果把所有的数值都展现出来，一来太多，二来更耗资源，而且频率邻值是相似的，非智者所为，怎么处理呢？数学中有学过<strong>采样频率</strong>的方法，采样对于信息信号来说，是个常用的方式。根据画布长度，美观起见，让每一频占据一定宽度，各个频之间留些空隙，同时用数学逻辑思维换算，计算出画布可放的频数，也就是说画布上选择哪几个频率值显示，取相对应“编号”的频率，进行绘制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 条形的宽度</span><br><span class="line">var bar_width &#x3D; 10,</span><br><span class="line">    bar_gap &#x3D; 2,</span><br><span class="line">    bar_part &#x3D; bar_width + bar_gap,</span><br><span class="line">    bar_num &#x3D; Math.round(c_width &#x2F; bar_part);</span><br><span class="line"></span><br><span class="line">***************************************</span><br><span class="line">      function drawVisual() &#123;</span><br><span class="line">            var i &#x3D; 0, value;</span><br><span class="line">            </span><br><span class="line">            var bufferLength &#x3D; analyser.frequencyBinCount,</span><br><span class="line">                dataArray &#x3D; new Uint8Array(bufferLength);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 每段包含的频谱宽</span><br><span class="line">            var array_width &#x3D; Math.round(bufferLength &#x2F; bar_num);</span><br><span class="line"></span><br><span class="line">            analyser.getByteFrequencyData(dataArray);</span><br><span class="line"></span><br><span class="line">            ctx.clearRect(0,0,c_width,c_height)</span><br><span class="line"></span><br><span class="line">            for(i; i &lt; bar_num; i++) &#123;</span><br><span class="line">                value &#x3D; dataArray[i * array_width];</span><br><span class="line">               </span><br><span class="line">                ctx.fillStyle &#x3D; &#39;#f99&#39;;</span><br><span class="line">                ctx.fillRect(bar_part * i, c_height - value, bar_width, value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            animation_id &#x3D; requestAnimationFrame(drawVisual);</span><br><span class="line">            &#x2F;&#x2F; console.log(animation_id)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/2320147-e1415bd4e2861d3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="类似"></p>
<h5 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h5><p>如此一来，大致效果已经实现。在做的过程中，有一个问题需要思考： 动画什么时候停止，也就是说，如何在音乐播放结束的情况下，页面频谱流畅地回归空白，浏览器也不会继续动画，做到“该停止时就停止”。【实践结果证明，如果在音乐播放结束就停止动画或者清空，达不到想要的效果】</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-4f9e218932103d11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="立刻停止页面"></p>
<p>为了美观及更有趣味性，我们可以加个缓慢降落的条形；甚者，采取上传文件的形式，根据上传的音乐“舞动”自己的音浪，因频制浪。这里有个稍难的点：已经播放一首音乐的时候，如何做到继续上传，原音乐停止，新音乐播放并出现相应的频谱。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-2244d7d980289bd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="加条形.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-da6c6e64a176e345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="上传文件形式.png"></p>
<p>【代码存在于 <a href="https://github.com/smilewalker/audioVisual" target="_blank" rel="noopener">github</a>，仅供参考，敬请交流】</p>
<p>参考文章：<br><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0ahUKEwj9xpzE2K_SAhUNtJQKHQQMCu4QFggaMAA&amp;url=https%3a%2f%2fdeveloper%2emozilla%2eorg%2fzh-CN%2fdocs%2fWeb%2fAPI%2fFileReader&amp;usg=AFQjCNGz5Veo8Ux5iQ_w_1oFQc3fqNlynA" target="_blank" rel="noopener">https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0ahUKEwj9xpzE2K_SAhUNtJQKHQQMCu4QFggaMAA&amp;url=https%3a%2f%2fdeveloper%2emozilla%2eorg%2fzh-CN%2fdocs%2fWeb%2fAPI%2fFileReader&amp;usg=AFQjCNGz5Veo8Ux5iQ_w_1oFQc3fqNlynA</a><br><a href="http://www.cnblogs.com/Wayou/p/html5_audio_api_visualizer.html" target="_blank" rel="noopener">http://www.cnblogs.com/Wayou/p/html5_audio_api_visualizer.html</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API</a><br><a href="https://forestmist.org/blog/web-audio-api-loops#source" target="_blank" rel="noopener">https://forestmist.org/blog/web-audio-api-loops#source</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>JavaScript</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>js实现七牛云上传图片视频</title>
    <url>/2017/03/12/js%E5%AE%9E%E7%8E%B0%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p>最近新写个项目，需要上传视频，用了七牛的JavaScriptSDK，七牛云文档其实讲的很清楚，引用代码记录下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-3f3a99a0d0aeb4bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<a id="more"></a>

<p>“无言独上西楼，月如钩，寂寞梧桐深院锁清秋。剪不断，理还乱，是离愁，别是一般滋味在心头。”<br>—— 题记，引自《相见欢》</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><hr>
<p>最近新写个项目，需要上传视频，用了七牛的JavaScriptSDK，七牛云文档其实讲的很清楚，引用代码记录下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-3f3a99a0d0aeb4bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var option1 &#x3D; &#123;</span><br><span class="line">  runtimes: &#39;html5,flash,html4&#39;,</span><br><span class="line">  browse_button: &#39;pickfiles&#39;,</span><br><span class="line">  container: &#39;container&#39;,</span><br><span class="line">  drop_element: &#39;container&#39;,</span><br><span class="line">  max_file_size: &#39;1000mb&#39;,</span><br><span class="line">  filters : &#123; mime_types: [ &#123;title: &quot;Video files&quot;, extensions : &quot;flv,mpg,mpeg,avi,wmv,mov,asf,rm,rmvb,mkv,m4v,mp4&quot;&#125;] &#125;,</span><br><span class="line">  flash_swf_url: &#39;&#x2F;static&#x2F;js&#x2F;Moxie.swf&#39;,</span><br><span class="line">  dragdrop: true,</span><br><span class="line">  chunk_size: &#39;4mb&#39;,</span><br><span class="line">  multi_selection: false,</span><br><span class="line">  uptoken_func: function()&#123;</span><br><span class="line">    var ajax &#x3D; new XMLHttpRequest();</span><br><span class="line">    ajax.open(&#39;GET&#39;, location.origin + &#39;&#x2F;cloud&#x2F;video&#x2F;uploadtoken&#39;, false);</span><br><span class="line">    ajax.setRequestHeader(&quot;If-Modified-Since&quot;, &quot;0&quot;);</span><br><span class="line">    ajax.send();</span><br><span class="line">    if (ajax.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">      var res &#x3D; JSON.parse(ajax.responseText);</span><br><span class="line">      console.log(res)</span><br><span class="line">      if (res.data &amp;&amp; res.data.video &amp;&amp; res.data.video.qiniu) &#123;</span><br><span class="line">        var token &#x3D; res.data.video.qiniu.upToken; </span><br><span class="line">        console.log(res.data);</span><br><span class="line">        self.keys &#x3D; res.data.video.qiniu.key;</span><br><span class="line">        return token;</span><br><span class="line">      &#125;</span><br><span class="line">      return &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  domain: &#39;http:&#x2F;&#x2F;video01.jiuyan.info&#x2F;&#39;,</span><br><span class="line">  get_new_uptoken: false,</span><br><span class="line">  auto_start: true,</span><br><span class="line">  log_level: 5,</span><br><span class="line">  init: &#123;</span><br><span class="line">    &#39;FilesAdded&#39;: function(up, files) &#123;</span><br><span class="line">      $(&#39;table&#39;).show();</span><br><span class="line">      plupload.each(files, function(file) &#123;</span><br><span class="line">        var progress &#x3D; new FileProgress(file, &#39;fsUploadProgress&#39;);</span><br><span class="line">        progress.setStatus(&quot;等待...&quot;);</span><br><span class="line">        progress.bindUploadCancel(up);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;BeforeUpload&#39;: function(up, file) &#123;</span><br><span class="line">      var progress &#x3D; new FileProgress(file, &#39;fsUploadProgress&#39;);</span><br><span class="line">      var chunk_size &#x3D; plupload.parseSize(this.getOption(&#39;chunk_size&#39;));</span><br><span class="line">      if (up.runtime &#x3D;&#x3D;&#x3D; &#39;html5&#39; &amp;&amp; chunk_size) &#123;</span><br><span class="line">          progress.setChunkProgess(chunk_size);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;UploadProgress&#39;: function(up, file) &#123;</span><br><span class="line">      var progress &#x3D; new FileProgress(file, &#39;fsUploadProgress&#39;);</span><br><span class="line">      var chunk_size &#x3D; plupload.parseSize(this.getOption(&#39;chunk_size&#39;));</span><br><span class="line">      progress.setProgress(file.percent + &quot;%&quot;, file.speed, chunk_size);</span><br><span class="line">      console.log(file)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; &#39;UploadComplete&#39;: function() &#123; $(&#39;#success&#39;).show(); &#125;,</span><br><span class="line">    &#39;FileUploaded&#39;: function(up, file, info) &#123;</span><br><span class="line">      &#x2F;&#x2F; var k &#x3D; info;</span><br><span class="line">      self.video_info &#x3D; info;</span><br><span class="line">      var cover_info &#x3D; $.parseJSON(info)</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; self.data.video_hash &#x3D; k.hash;</span><br><span class="line">      console.log(info)</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; console.log(info.key)</span><br><span class="line">      &#x2F;&#x2F; console.log(k.key)</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; console.log(self.data.video_info)</span><br><span class="line"></span><br><span class="line">      console.log(&#39;success&#39;)</span><br><span class="line">      var progress &#x3D; new FileProgress(file, &#39;fsUploadProgress&#39;);</span><br><span class="line">      progress.setComplete(up, info);</span><br><span class="line">      $(&#39;#pickfiles span&#39;).html(&#39;重新上传&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;Error&#39;: function(up, err, errTip) &#123;</span><br><span class="line">      $(&#39;table&#39;).show();</span><br><span class="line">      var progress &#x3D; new FileProgress(err.file, &#39;fsUploadProgress&#39;);</span><br><span class="line">      progress.setError();</span><br><span class="line">      progress.setStatus(errTip);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;Key&#39;: function(up, file) &#123;</span><br><span class="line">      var key &#x3D; self.keys.shift();</span><br><span class="line">      &#x2F;&#x2F; do something with key</span><br><span class="line">      return key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var uploader &#x3D; Qiniu.uploader(option1);</span><br><span class="line"></span><br><span class="line">uploader.bind(&#39;FileUploaded&#39;, function() &#123;</span><br><span class="line">  console.log(&#39;hello man,a file is uploaded&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var Qiniu2 &#x3D; new QiniuJsSDK();</span><br><span class="line">var option2 &#x3D; &#123;</span><br><span class="line">  runtimes: &#39;html5,flash,html4&#39;,</span><br><span class="line">  browse_button: &#39;info-cover&#39;,</span><br><span class="line">  container: &#39;container&#39;,</span><br><span class="line">  drop_element: &#39;container&#39;,</span><br><span class="line">  max_file_size: &#39;1000mb&#39;,</span><br><span class="line">  filters : &#123; mime_types: [ &#123;title: &quot;Image files&quot;, extensions : &quot;jpg,png,jpeg&quot;&#125;] &#125;,</span><br><span class="line">  flash_swf_url: &#39;&#x2F;static&#x2F;js&#x2F;Moxie.swf&#39;,</span><br><span class="line">  dragdrop: true,</span><br><span class="line">  chunk_size: &#39;4mb&#39;,</span><br><span class="line">  multi_selection: false,</span><br><span class="line">  uptoken_func: function()&#123;</span><br><span class="line">    var ajax &#x3D; new XMLHttpRequest();</span><br><span class="line">    ajax.open(&#39;GET&#39;, location.origin + &#39;&#x2F;cloud&#x2F;video&#x2F;uploadtoken&#39;, false);</span><br><span class="line">    ajax.setRequestHeader(&quot;If-Modified-Since&quot;, &quot;0&quot;);</span><br><span class="line">    ajax.send();</span><br><span class="line">    if (ajax.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">      var res &#x3D; JSON.parse(ajax.responseText);</span><br><span class="line">      if (res.data &amp;&amp; res.data.cover &amp;&amp; res.data.cover.qiniu) &#123;</span><br><span class="line">        var token &#x3D; res.data.cover.qiniu.upToken;</span><br><span class="line">        console.log(res.data) </span><br><span class="line">        self.coverkeys &#x3D; res.data.cover.qiniu.key;</span><br><span class="line">        return token;</span><br><span class="line">      &#125;</span><br><span class="line">      return &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  domain: &#39;http:&#x2F;&#x2F;inimg01.jiuyan.info&#x2F;&#39;,</span><br><span class="line">  get_new_uptoken: false,</span><br><span class="line">  auto_start: true,</span><br><span class="line">  log_level: 5,</span><br><span class="line">  init: &#123;</span><br><span class="line">    &#39;FilesAdded&#39;: function(up, files) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;BeforeUpload&#39;: function(up, file) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;UploadProgress&#39;: function(up, file) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; &#39;UploadComplete&#39;: function() &#123; $(&#39;#success&#39;).show(); &#125;,</span><br><span class="line">    &#39;FileUploaded&#39;: function(up, file, info) &#123;</span><br><span class="line">      &#x2F;&#x2F; var k &#x3D; info;</span><br><span class="line">      self.cover_info &#x3D; info;</span><br><span class="line">      console.log(info)</span><br><span class="line">      var result_url &#x3D; up.getOption(&#39;domain&#39;) + $.parseJSON(info).key</span><br><span class="line">      document.getElementById(&#39;loader-wrap&#39;).className &#x3D; &#39;loader-wrap&#39;</span><br><span class="line">      var coverWrap &#x3D; document.getElementById(&#39;cover-wrap&#39;)</span><br><span class="line">      coverWrap.style.backgroundImage &#x3D; &quot;url(&quot; + result_url + &quot;)&quot;;</span><br><span class="line">      self.isActive &#x3D; true;</span><br><span class="line">      console.log(&#39;success&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;Error&#39;: function(up, err, errTip) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;Key&#39;: function(up, file) &#123;</span><br><span class="line">      var key &#x3D; self.coverkeys.shift();</span><br><span class="line">      &#x2F;&#x2F; &#x2F;&#x2F; do something with key</span><br><span class="line">      return key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var uploader2 &#x3D; Qiniu2.uploader(option2);</span><br><span class="line"></span><br><span class="line">uploader2.bind(&#39;FileUploaded&#39;, function() &#123;</span><br><span class="line">  console.log(&#39;hello man 2,a file is uploaded&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&#39;#info-cover&#39;).on(&#39;click&#39;, function()&#123;</span><br><span class="line">  uploader2.start();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p>参考文章：<br><a href="https://developer.qiniu.com/kodo/sdk/javascript#8" target="_blank" rel="noopener">https://developer.qiniu.com/kodo/sdk/javascript#8</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>JavaScript</tag>
        <tag>七牛云</tag>
      </tags>
  </entry>
  <entry>
    <title>js解决canvas合成图模糊</title>
    <url>/2017/01/21/js%E8%A7%A3%E5%86%B3canvas%E5%90%88%E6%88%90%E5%9B%BE%E6%A8%A1%E7%B3%8A/</url>
    <content><![CDATA[<p>写H5 canvas的时候，我们可能会遇到这样那样的问题，比如说canvas合成的图片模糊，俗语有言“一颗老鼠屎坏了一锅粥”，最后有没有因模糊而坏了H5这锅粥也就自我衡量吧。索性来看看移动端canvas合成的图片模糊问题。先上两张图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-ac4adb2cf965c867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="图1"></p>
<a id="more"></a>

<p>“模糊是多么 多么寂寞；模糊是多么 多么空虚；独自在清晰中，对比不断地扫过；我的寂寞，谁能明白我；模糊是多么 多么寂寞；模糊是多么 多么空虚；web开发的你，可不可听我诉说；我的寂寞，无尽的寂寞……”<br>——题记，改编源自《美人鱼》</p>
<h4 id="昨夜西风凋碧树，独上高楼，望尽天涯路。"><a href="#昨夜西风凋碧树，独上高楼，望尽天涯路。" class="headerlink" title="昨夜西风凋碧树，独上高楼，望尽天涯路。"></a>昨夜西风凋碧树，独上高楼，望尽天涯路。</h4><p>写H5 canvas的时候，我们可能会遇到这样那样的问题，比如说canvas合成的图片模糊，俗语有言“一颗老鼠屎坏了一锅粥”，最后有没有因模糊而坏了H5这锅粥也就自我衡量吧。索性来看看移动端canvas合成的图片模糊问题。先上两张图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-ac4adb2cf965c867.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="图1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-b0af2c3a2ba2595a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="图2"></p>
<p>图1图2的对比，显而易见图1的质量低得不忍直视，一点点把H5拉低了档次，图2则相较清晰许多。第一张利用的是直接合成操作，第二张canvas做了放大处理再来合成。先来找找原因，合成的图片怎这般糊？再对症下药。</p>
<h4 id="衣带渐宽终不悔，为伊消得人憔悴。"><a href="#衣带渐宽终不悔，为伊消得人憔悴。" class="headerlink" title="衣带渐宽终不悔，为伊消得人憔悴。"></a>衣带渐宽终不悔，为伊消得人憔悴。</h4><p>为什么会模糊？我们看看canvas是如何合成的。这里谈到一个词，像素渲染，涉及的属性有<code>devicePixelRatio</code>，解释如下：</p>
<blockquote>
<p>The Window.devicePixelRatio<br> read-only property returns the ratio of the (vertical) size of one physical pixel on the current display device to the size of one device independent pixels(dips).  <em>[引自 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio" target="_blank" rel="noopener">MDN</a>]</em></p>
</blockquote>
<blockquote>
<p>window.devicePixelRatio是设备的物理像素和设备独立像素(device-independent pixels (dips))的比例。<br>公式表示为：window.devicePixelRatio = 物理像素 / dips  </p>
</blockquote>
<p>我们可以通过输出移动端的devicePixelRatio来看看，部分手机测的数据如下：</p>
<table>
<thead>
<tr>
<th>device</th>
<th align="center">devicePixelRatio</th>
</tr>
</thead>
<tbody><tr>
<td>iphone6</td>
<td align="center">2</td>
</tr>
<tr>
<td>魅蓝U20</td>
<td align="center">3</td>
</tr>
<tr>
<td>OPPO R9m</td>
<td align="center">3</td>
</tr>
<tr>
<td>红米note</td>
<td align="center">2</td>
</tr>
<tr>
<td>mi3</td>
<td align="center">3</td>
</tr>
</tbody></table>
<p>现在ios的多数情况是这样的：视网膜的屏幕物理像素640，独立像素320，所以devicePixelRadio=640 / 320 = 2;。什么意思？比如说一张图片为100*100像素，在devicePixelRadio=2的情况，相当于用2个像素的宽度来渲染1个像素，所以实际上占了200*200的空间，相当于放大1倍。在canvas也有类似的属性：</p>
<blockquote>
<p>canvas context中存在一个webkitBackingStorePixelRatio的属性（仅Safari和chrome），该属性的值决定了浏览器在渲染canvas之前会用几个像素来来存储画布信息。</p>
</blockquote>
<p>若webkitBackingStorePixelRatio为2，canvas同理，用2个像素点的宽度来渲染。目前测到的iOS canvas的webkitBackingStorePixelRatio为1，安卓为undifined，测的手机不多，还没测到其他数据的手机。</p>
<p>也就是说，如果webkitBackingStorePixelRatio的值为2，而devicePixelRadio值也为2，生成的图片跟渲染的图片大小一致，这样的话是不会出现图片失真的情况。而当两者不一致时，那么问题就来了。</p>
<h4 id="众里寻他千百度，蓦然回首，那人却在灯火阑珊处。"><a href="#众里寻他千百度，蓦然回首，那人却在灯火阑珊处。" class="headerlink" title="众里寻他千百度，蓦然回首，那人却在灯火阑珊处。"></a>众里寻他千百度，蓦然回首，那人却在灯火阑珊处。</h4><p>综上所述，我们的一个解决思路是对canvas的大小进行处理，使生成的图片跟渲染的图片一致。怎么一致？利用两者的比值，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var  devicePixelRatio &#x3D; window.devicePixelRatio || 1,   </span><br><span class="line">  backingStoreRatio &#x3D; context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1, </span><br><span class="line">  ratio &#x3D; devicePixelRatio &#x2F; backingStoreRatio;</span><br><span class="line"></span><br><span class="line">var oldWidth &#x3D; canvas.width; </span><br><span class="line">var oldHeight &#x3D; canvas.height; </span><br><span class="line">canvas.width &#x3D; oldWidth * ratio; </span><br><span class="line">canvas.height &#x3D; oldHeight * ratio; </span><br><span class="line">canvas.style.width &#x3D; oldWidth + &#39;px&#39;; </span><br><span class="line">canvas.style.height &#x3D; oldHeight + &#39;px&#39;; </span><br><span class="line">context.scale(ratio, ratio);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;进行正常的操作</span><br><span class="line">context.drawImage()</span><br></pre></td></tr></table></figure>

<p>具体手机具体对应，可能有人会奇怪怎有两个长度，事实上，一个是显示的canvas的css长宽，一个是canvas画布实际大小，两者并不冲突。暂此，敬请交流。</p>
<p><em>参考文章</em><br><a href="http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/" target="_blank" rel="noopener">http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/</a><br><a href="https://www.html5rocks.com/en/tutorials/canvas/hidpi/" target="_blank" rel="noopener">https://www.html5rocks.com/en/tutorials/canvas/hidpi/</a><br><a href="http://blog.csdn.net/laijingyao881201/article/details/39505043" target="_blank" rel="noopener">http://blog.csdn.net/laijingyao881201/article/details/39505043</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>JavaScript</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>js解决canvas绘制多图</title>
    <url>/2017/01/12/js%E8%A7%A3%E5%86%B3canvas%E7%BB%98%E5%88%B6%E5%A4%9A%E5%9B%BE/</url>
    <content><![CDATA[<p>canvas一箩筐问题， 之前一文<a href="http://www.jianshu.com/p/3c223211ca7e" target="_blank" rel="noopener"> JS | canvas 图片模糊 </a>讲了合成图的模糊，本文讲讲另一个，canvas绘制多图，这也是在做H5的过程中遇到的一个坎，比如说合成图少元素，比如说跨域等。</p>
<a id="more"></a>

<p>“处理图片是我们普通市民的责任，积累跬步是我本身的兴趣，所以加载图片我每次都跑一次，如果遇到多张图片的话我还会多跑几次。”<br>——题记，改自《破坏之王》</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>canvas一箩筐问题， 之前一文<a href="http://www.jianshu.com/p/3c223211ca7e" target="_blank" rel="noopener"> JS | canvas 图片模糊 </a>讲了合成图的模糊，本文讲讲另一个，canvas绘制多图，这也是在做H5的过程中遇到的一个坎，比如说合成图少元素，比如说跨域等。</p>
<p>原始做法：<br>前提多张图片，本地开发的时候，通过改变HTML img元素的路径<code>src</code>（多个img元素在H5已有），进行绘制<code>drawImage</code>，比如说<code>drawImage(document.getElementById(&#39;img1&#39;), 0, 0)</code>，没问题，多图合成图片效果正常；到了线上，报出一长串红文，不好意思，您的图片没有权限，绘制失败。ok，跨域么，翻资料，加个<code>crossOrigin</code>，允许跨域请求资源。这个可以一试。</p>
<blockquote>
<p><strong>使用其它域名下的图片</strong><br>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLImageElement" target="_blank" rel="noopener">HTMLImageElement</a>上使用<a href="https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes" target="_blank" rel="noopener">crossOrigin</a>属性，你可以请求加载其它域名上的图片。如果图片的服务器允许跨域访问这个图片，那么你可以使用这个图片而不污染canvas，否则，使用这个图片将会<a href="https://developer.mozilla.org/zh-CN/docs/CORS_Enabled_Image#.E4.BB.80.E4.B9.88.E6.98.AF.22.E8.A2.AB.E6.B1.A1.E6.9F.93.22.E7.9A.84canvas" target="_blank" rel="noopener">污染canvas</a>。</p>
</blockquote>
<blockquote>
<p><strong>什么是“被污染”的 canvas?</strong><br>尽管不通过 CORS 就可以在画布中使用图片，但是这会<strong>污染</strong>画布。一旦画布被污染，你就无法读取其数据。例如，你不能再使用画布的 toBlob(), toDataURL() 或 getImageData()方法，调用它们会抛出安全错误。<br>这种机制可以避免未经许可拉取远程网站信息而导致的用户隐私泄露。<br><em>[引自MDN]</em></p>
</blockquote>
<p>最后方案（不在H5显示img元素，从零创建）：<br>通过js创建image对象，对于多张图片，建立数组，<strong>加载完成多张图片后</strong>，进行canvas绘制，后再进行合成图片。这里有个强调，必须要在加载完成后，方可绘制，也就是说有先后顺序，顺序没处理好，可能导致合成的图片缺头少尾，甚至空白。这里利用jquery的deffered来处理先后顺序问题。</p>
<blockquote>
<p>若调用 drawImage时，图片没加载完，那什么都不会发生（在一些旧的浏览器中可能会抛出异常）。</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;预加载</span><br><span class="line">function preloadImg(list, imgs) &#123;</span><br><span class="line">  var def &#x3D; $.Deferred(),</span><br><span class="line">      len &#x3D; list.length;</span><br><span class="line">  $(list).each(function(i,e) &#123;    </span><br><span class="line">    var img &#x3D; new Image(); </span><br><span class="line">    img.crossOrigin &#x3D; &quot;&quot;; &#x2F;&#x2F;跨域请求资源</span><br><span class="line">    img.onload &#x3D; (function(j) &#123;</span><br><span class="line">      return function() &#123;</span><br><span class="line">        imgs[j] &#x3D; img</span><br><span class="line">        len--;</span><br><span class="line">        if(len &#x3D;&#x3D; 0) &#123;  def.resolve();  &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">    img.onerror &#x3D; function() &#123;</span><br><span class="line">      len--;</span><br><span class="line">      alert(&#39;fail to load image&#39;);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.src &#x3D; e; &#x2F;&#x2F; 确保缓存的图片也触发 load 事件</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(def.promise())</span><br><span class="line">  return def.promise();</span><br><span class="line">&#125;</span><br><span class="line">$.when(preloadImg(list, imgs)).done(</span><br><span class="line">  function() &#123;</span><br><span class="line">    draw事件</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><em>参考文章</em><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Using_images" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Using_images</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-a1bc92ad1bb33afe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="image.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>JavaScript</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>node-sass安装的小坑</title>
    <url>/2017/04/19/node-sass%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>一项目，开始运行的时候，总会报出node-sass没找到的error：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-5bddcd094005b215.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>ok，那就安装node sass，一查发现，这个问题大家伙似乎都有经历，我也顺带着记录下来，以备埋坑。</p>
<a id="more"></a>
<p>一项目，开始运行的时候，总会报出node-sass没找到的error：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-5bddcd094005b215.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>ok，那就安装node sass，一查发现，这个问题大家伙似乎都有经历，我也顺带着记录下来，以备埋坑。</p>
<p>网上有说利用taobao，然而并没成功：<br>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>
<p>那就换个方法吧，成功：<br>cnpm install –save-dev node-sass</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-fa60ed5cf5dd4e0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>node-sass</tag>
      </tags>
  </entry>
  <entry>
    <title>web audio api实现你的音乐·上</title>
    <url>/2017/02/16/web%20audio%20api%E5%AE%9E%E7%8E%B0%E4%BD%A0%E7%9A%84%E9%9F%B3%E4%B9%90%C2%B7%E4%B8%8A/</url>
    <content><![CDATA[<p>Web Audio API为控制网页的音频提供了强有力的后盾，允许开发人员为音频添加效果，创建音频可视化等等。</p>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1487245004499&di=5772e6bce17addb4605adf4284b86861&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%3D580%2Fsign%3D715823f1f403918fd7d13dc2613c264b%2Ffaa155540923dd544431d379d209b3de9d824896.jpg" alt="源自网络.png"></p>
<a id="more"></a>

<p>“如毒似魅，如解似仙。程序世界，代码纷纷，web audio是流经存在的邂逅。九十刹那为一念，一念中一刹那经九百生灭，盘舞环形地来寻你。”<br>—— 题记</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><hr>
<h3 id="Web-Audio简介"><a href="#Web-Audio简介" class="headerlink" title="Web Audio简介"></a>Web Audio简介</h3><p>Web Audio API为控制网页的音频提供了强有力的后盾，允许开发人员为音频添加效果，创建音频可视化等等。</p>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1487245004499&di=5772e6bce17addb4605adf4284b86861&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%3D580%2Fsign%3D715823f1f403918fd7d13dc2613c264b%2Ffaa155540923dd544431d379d209b3de9d824896.jpg" alt="源自网络.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-b157f7d93dee4389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="源自网络.png"></p>
<blockquote>
<p><strong>百科：音频和声音</strong><br><img src="http://upload-images.jianshu.io/upload_images/2320147-c6c714a2f55d2df4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="百度百科"><br><img src="http://upload-images.jianshu.io/upload_images/2320147-2066094f7b0153c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="百度百科"></p>
</blockquote>
<h6 id="Web-audio的内容和用途"><a href="#Web-audio的内容和用途" class="headerlink" title="Web audio的内容和用途"></a>Web audio的内容和用途</h6><p>Web Audio API包含通过<strong>audio context</strong>操控音频，不同类型的源也可以被一个环境支持，并允许模块路由。利用<strong>audio nodes</strong>（连接一起形成了<strong>audio routing graph</strong>）执行操作，模块的设计为创建复杂音频功能提供灵活性。</p>
<p>根据英文解释，它是在<strong>audio context</strong>里操控音乐的发生，无论是一首或多首，都可以在一个audio context里搞定，相当于为audio的控制设置了一个环境，我们在这个操控室里统筹音乐。环境有了，用什么来操作，<strong>audio nodes</strong>，相当于各种操纵杆。也有这么一个比喻说，“想象卡拉OK设备，DVD机相当于音频音源，音响相当于音频播放设备，混响器（主要用于把你的声音与背景音乐合成最终输出到音响上）相当于音频处理模块”，然后各个模块通过电线连接，最终接在音响上。</p>
<h6 id="Web-audio的工作流程"><a href="#Web-audio的工作流程" class="headerlink" title="Web audio的工作流程"></a>Web audio的工作流程</h6><ol>
<li>创建音频环境（audio context）</li>
<li>在音频环境里，创建源 —— 比如<audio>, oscillator, stream</li>
<li>创建效果节点，比如reverb, biquad filter, panner, compressor</li>
<li>选择音频的最终输出口，比如扬声器</li>
<li>连接 源——效果——目的地（输入——处理——输出）</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-b45ad376c2ba1bba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例.png"></p>
<h3 id="部分属性方法解释"><a href="#部分属性方法解释" class="headerlink" title="部分属性方法解释"></a>部分属性方法解释</h3><h5 id="AudioContext"><a href="#AudioContext" class="headerlink" title="AudioContext"></a>AudioContext</h5><p>音频上下文对象，相当于声音容器，处理音频的前提环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var AudioContext &#x3D; window.AudioContext || window.webkitAudioContext;</span><br><span class="line">var audioCtx &#x3D; new AudioContext();</span><br></pre></td></tr></table></figure>
<ul>
<li><p>** <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/destination" target="_blank" rel="noopener">AudioContext.destination
</a>  **<br>返回对象 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode" target="_blank" rel="noopener">AudioDestinationNode
</a>，表示环境里的所有音频的最终目标，代表实际的音频渲染设备，例如扬声器。</p>
</li>
<li><p><strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData" target="_blank" rel="noopener">AudioContext.decodeAudioData()
</a></strong><br>用于异步解析 <a href="https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer" target="_blank" rel="noopener">ArrayBuffer
</a>里的音乐文件。这种情况下，ArrayBuffer 通过<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest
</a> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader" target="_blank" rel="noopener">FileReader
</a>加载。解析后的音频缓冲被重复抽样到AudioContext的采样率，然后用于callback或者promise。<br>这是从音轨创建Web音频API的音频源的首选方法。<br>利用回调： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">audioCtx.decodeAudioData(audioData, function(decodedData) &#123;</span><br><span class="line">  &#x2F;&#x2F; use the decoded data here</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>或者利用promise：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">audioCtx.decodeAudioData(audioData).then(function(decodedData) &#123;</span><br><span class="line">  &#x2F;&#x2F; use the decoded data here</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>** <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource" target="_blank" rel="noopener">AudioContext.createBufferSource()
</a> **<br>用于创建新的音频节点对象 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode" target="_blank" rel="noopener">AudioBufferSourceNode</a>，来播放 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer" target="_blank" rel="noopener">AudioBuffer
</a>的音乐数据。而<a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer" target="_blank" rel="noopener">AudioBuffer</a>s是通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBuffer" target="_blank" rel="noopener">AudioContext.createBuffer
</a> 来创建或者 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData" target="_blank" rel="noopener">AudioContext.decodeAudioData
</a>成功解码音轨时返回。</p>
</li>
<li><p>** <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createAnalyser" target="_blank" rel="noopener">AudioContext.createAnalyser()</a> **<br>创建分析节点对象 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode" target="_blank" rel="noopener">AnalyserNode
</a>，被用来展示音频时间和频率数据，并创建数据可视化。</p>
</li>
</ul>
<h5 id="AudioNode"><a href="#AudioNode" class="headerlink" title="AudioNode"></a>AudioNode</h5><p>用于表示像音频源的节点（例如，HTML <audio>或<video>元素，振荡器节点等），音频目的地，中间处理模块（例如像BiquadFilterNode或ConvolverNode）或音量控制（如GainNode）。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-425d7b50d4102aac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="官方图例.png"></p>
<p>AudioNode具有输入和输出，每个都有一定数量的通道。零输入但有一个或多个输出的AudioNode称为源节点（<em>source node</em>）。不同节点的音频处理是不同的，总之，节点解读其输入，进行一些音频相关处理，并为其输出生成新的值，或者简单的让音频通过（例如，在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode" target="_blank" rel="noopener">AnalyserNode
</a>里，其中处理的结果被单独访问）</p>
<p>连接不同的节点可以组成一个处理图（* processing graph *），同样包含在  <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext" target="_blank" rel="noopener">AudioContext
</a>中。一般来说，处理节点继承AudioNode的方法和属性，但会在顶部定义自身功能。有关更多详细信息，请参阅各个节点页面，如 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API" target="_blank" rel="noopener">Web Audio API</a> 首页所列。</p>
<ul>
<li>** <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect" target="_blank" rel="noopener">AudioNode.connect()
</a> **<br>允许将当前节点的输出连接到目的，可以是音频节点（将声音数据定向到指定节点），或<a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam" target="_blank" rel="noopener">AudioParam
</a>，以便节点的输出数据随时间自动更改该参数的值。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var destinationNode &#x3D; AudioNode.connect(destination, outputIndex, inputIndex);</span><br><span class="line">AudioNode.connect(destination, outputIndex);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>** AudioBufferSourceNode **</p>
<p>操作audioBuffer对象里的音频数据，把audioBuffer中的数据转化为音频信号，作为音频源，零输入，一个输出，属于Audio Node。输出的通道数量对应着音频缓冲区的通道数量。如果没有任何的缓冲区，也就是说，如果AudioBufferSourceNode 的值为null，输出为包含静音的一个通道。一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode" target="_blank" rel="noopener">AudioBufferSourceNode
</a>只可以播放一次；常说，AudioBufferSourceNodes 有个“射后不管”模式，一劳永逸：一旦开始，所有节点的引用都可以被删除，并且自动回收。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-1a22a86df5ff0002.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="官方图例.png"></p>
<ul>
<li><p>** <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer" target="_blank" rel="noopener">AudioBufferSourceNode.buffer
</a> **<br>音频缓冲区，表示播放的音频集，当被设置值为null的时候，会被定义为静音单声道。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var source &#x3D; audioCtx.createBufferSource();</span><br><span class="line">&#x2F;&#x2F; from audioCtx.createBuffer, or audioCtx.decodeAudioData</span><br><span class="line">source.buffer &#x3D; myBuffer;</span><br></pre></td></tr></table></figure>
</li>
<li><p>** <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start" target="_blank" rel="noopener">AudioBufferSourceNode.start()
</a> **<br>音乐的开始播放。AudioBufferSourceNode.start()仅对应一个。如果再次播放，需要另创建一个AudioBufferSourceNode 。这些节点是很容易创建的，AudioBuffers 也能够反复利用。</p>
</li>
<li><p>** <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/stop" target="_blank" rel="noopener">AudioBufferSourceNode.stop()
</a> **<br>音乐的停止播放。AudioBufferSourceNode.stop()是被允许暂停多个音乐。最近的声音将会替代原先的，没有完全到缓冲区的末尾。</p>
</li>
</ul>
<h5 id="AnalyserNode"><a href="#AnalyserNode" class="headerlink" title="AnalyserNode"></a>AnalyserNode</h5><p>能提供实时频率以及时间域分析信息的节点，它是一个AudioNode，将音频流从输入传递到输出，允许获取和处理生成的数据，并创建音频可视化。<br>拥有一个输出，一个输出，尽管输出没有链接，节点也会工作。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-c0cee8c6b87eb34c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="官方图例.png"></p>
<ul>
<li><p>** <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount" target="_blank" rel="noopener">AnalyserNode.frequencyBinCount</a> **<br>无符号长整型值，是FFT大小的一半。这通常等于将要用于可视化的数据值的数量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var audioCtx &#x3D; new AudioContext();</span><br><span class="line">var analyser &#x3D; audioCtx.createAnalyser();</span><br><span class="line">var bufferLength &#x3D; analyser.frequencyBinCount;</span><br></pre></td></tr></table></figure>
</li>
<li><p>** <a href="https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData" target="_blank" rel="noopener">AnalyserNode.getByteFrequencyData()</a> **<br>将当前数据频率复制转化为<a href="https://developer.mozilla.org/en-US/docs/Web/API/Uint8Array" target="_blank" rel="noopener">Uint8Array
</a>。<br>如果数组具有比AnalyserNode.frequencyBinCount更少的元素，则会删除多余的元素。如果它具有比所需要的更多的元素，则忽略多余的元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var audioCtx &#x3D; new AudioContext();</span><br><span class="line">var analyser &#x3D; audioCtx.createAnalyser();</span><br><span class="line">var dataArray &#x3D; new Uint8Array(analyser.frequencyBinCount); &#x2F;&#x2F; Uint8Array should be the same length as the frequencyBinCount </span><br><span class="line">analyser.getByteFrequencyData(dataArray); &#x2F;&#x2F; fill the Uint8Array with data returned from getByteFrequencyData()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>举个简单的例子，结合音频链路和代码：</p>
<ol>
<li><p>创建上下文，audio context;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var AudioContext &#x3D; window.AudioContext || window.webkitAudioContext;</span><br><span class="line">var audioCtx;</span><br><span class="line">&#x2F;&#x2F; var source;</span><br><span class="line">try &#123;</span><br><span class="line">    audioCtx &#x3D; new AudioContext();</span><br><span class="line">    console.log(&#39;support&#39;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">    alert(&#39;Your browser does not support AudioContext!&#39;);</span><br><span class="line">    console.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-51c6e14208b9a133.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="console.log(audioCtx).png"></p>
</li>
<li><p>利用方法createBufferSource()创建audioBufferSourceNode音频源对象；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x3D; audioCtx.createBufferSource();</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-9b243c6477e09fca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="console.log(source)"></p>
</li>
<li><p>完成获取需要播放的音频数据后，利用decodeAudioData()解码数据；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var request &#x3D; new XMLHttpRequest();</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;初始化 HTTP 请求参数, 配置请求类型，文件路径等</span><br><span class="line">    request.open(&#39;GET&#39;, &#39;audio&#x2F;music.mp3&#39;, true);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 配置数据返回类型,从服务器取回二进制数据</span><br><span class="line">    request.responseType &#x3D; &#39;arraybuffer&#39;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取完成，对音频进一步操作，解码</span><br><span class="line">    request.onload &#x3D; function() &#123;</span><br><span class="line">        var audioData &#x3D; request.response;</span><br><span class="line">        audioCtx.decodeAudioData(audioData, function(buffer) &#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125;,</span><br><span class="line">        function(e) &#123; console.log(&quot;Error with decoding audio data&quot; + e.err); &#125;);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>audioBufferSourceNode对象的buffer属性接收audioBuffer数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source.buffer &#x3D; buffer;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-99e5161174db7acd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="console.log(buffer)"></p>
</li>
<li><p>通过connect()将audioBufferSourceNode对象连接到audioContext的desitination（speakers）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source.connect(audioCtx.destination);</span><br></pre></td></tr></table></figure>
</li>
<li><p>从最开始播放</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source.start(0);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>附简单例子最终代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; create environment -- audio context</span><br><span class="line">&#x2F;&#x2F; define variables</span><br><span class="line"></span><br><span class="line">var AudioContext &#x3D; window.AudioContext || window.webkitAudioContext;</span><br><span class="line">var audioCtx;</span><br><span class="line">var source;</span><br><span class="line">try &#123;</span><br><span class="line">    audioCtx &#x3D; new AudioContext();</span><br><span class="line">    console.log(&#39;support&#39;);</span><br><span class="line">            console.log(audioCtx)</span><br><span class="line">    </span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">    alert(&#39;Your browser does not support AudioContext!&#39;);</span><br><span class="line">    console.log(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; use XHR to load an audio track, and</span><br><span class="line">&#x2F;&#x2F; decodeAudioData to decode it and stick it in a buffer.</span><br><span class="line">&#x2F;&#x2F; Then we put the buffer into the source</span><br><span class="line"></span><br><span class="line">var getData &#x3D; function() &#123;</span><br><span class="line">    &#x2F;&#x2F; create audio node to play the audio in the buffer</span><br><span class="line">    source &#x3D; audioCtx.createBufferSource();</span><br><span class="line">            console.log(source)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 请求</span><br><span class="line">    var request &#x3D; new XMLHttpRequest();</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;初始化 HTTP 请求参数, 配置请求类型，文件路径等</span><br><span class="line">    request.open(&#39;GET&#39;, &#39;audio&#x2F;music.mp3&#39;, true);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 配置数据返回类型,从服务器取回二进制数据</span><br><span class="line">    request.responseType &#x3D; &#39;arraybuffer&#39;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取完成，对音频进一步操作，解码</span><br><span class="line">    request.onload &#x3D; function() &#123;</span><br><span class="line">        var audioData &#x3D; request.response;</span><br><span class="line">        audioCtx.decodeAudioData(audioData, function(buffer) &#123;</span><br><span class="line">            source.buffer &#x3D; buffer;</span><br><span class="line"></span><br><span class="line">            source.connect(audioCtx.destination);</span><br><span class="line">            source.loop &#x3D; true;</span><br><span class="line">        &#125;,</span><br><span class="line">        function(e) &#123; console.log(&quot;Error with decoding audio data&quot; + e.err); &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 发送一个 HTTP 请求</span><br><span class="line">    request.send();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; play audio</span><br><span class="line">getData();</span><br><span class="line">source.start(0);</span><br></pre></td></tr></table></figure>

<p>【零零碎碎，通过一点点阅读官方英文文档，与部分中文文档的理解整理，web audio实现了跟音频的通信，会耗硬件资源，适用性没有canvas那么广，或许这也是中文文档并不多的原因，音乐世界，趣味无穷。震撼于它跟canvas结合制造的效果，欲知后事如何，且听下回分解吧~】</p>
<p>参考文章：<br><a href="https://developer.mozilla.org/en-US/docs/Web_Audio_API/Using_Web_Audio_API" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web_Audio_API/Using_Web_Audio_API</a><br><a href="https://github.com/wendellvian/blog/wiki/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86Audio%E4%B9%8B%E7%9C%8B%E5%BE%97%E8%A7%81%E7%9A%84%E9%9F%B3%E4%B9%90_20160725" target="_blank" rel="noopener">https://github.com/wendellvian/blog/wiki/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86Audio%E4%B9%8B%E7%9C%8B%E5%BE%97%E8%A7%81%E7%9A%84%E9%9F%B3%E4%B9%90_20160725</a><br><a href="http://www.ayqy.net/blog/web-audio-api%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">http://www.ayqy.net/blog/web-audio-api%E8%A7%A3%E6%9E%90/</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>JavaScript</tag>
        <tag>web audio api</tag>
      </tags>
  </entry>
  <entry>
    <title>web audio api实现你的音乐·下</title>
    <url>/2017/02/27/web%20audio%20api%E5%AE%9E%E7%8E%B0%E4%BD%A0%E7%9A%84%E9%9F%B3%E4%B9%90%C2%B7%E4%B8%8B/</url>
    <content><![CDATA[<p>在上文《web audio api实现你的音乐》中，我们了解到Audio API简单的音频知识点，重在理论，今天搞点有趣的试验，偏重实践。大家知道，光有光谱，电磁波有频谱，音乐呢？当然也有自己的谱。想奥斯特实验揭示电流周围存在磁场，分散的铁屑显现磁铁的磁场分布，那音乐如何看到自身的频率，所以，本文的主题来了，音频可视化，让你的音乐浪起来。先附上效果图，接下来会主要围绕效果例子出发：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-ca71f849ca37bdf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="效果图.png"></p>
<a id="more"></a>

<p>“沧海一声唱  滔滔两岸潮<br>浮沉随浪歌舞今朝<br>苍天唱  纷纷世上潮<br>谁负谁胜出天知晓<br>江山唱  烟雨遥<br>涛浪淘尽红尘俗世几多娇<br>清风唱  竟惹寂寥<br>豪情还剩了一襟晚照<br>苍生唱  不再寂寥<br>豪情仍在痴痴唱唱”<br>—— 题记，《沧海一声唱》</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>在上文《web audio api实现你的音乐》中，我们了解到Audio API简单的音频知识点，重在理论，今天搞点有趣的试验，偏重实践。大家知道，光有光谱，电磁波有频谱，音乐呢？当然也有自己的谱。想奥斯特实验揭示电流周围存在磁场，分散的铁屑显现磁铁的磁场分布，那音乐如何看到自身的频率，所以，本文的主题来了，音频可视化，让你的音乐浪起来。先附上效果图，接下来会主要围绕效果例子出发：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-ca71f849ca37bdf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="效果图.png"></p>
<p>这种音波似的效果，我们可能会在音乐室或音乐人或音乐播放器那儿看到，并不少见，当第一次发现可以实现时，ohMyGod，震撼，神奇，而对于喜欢的事物，总会想为我所用，闲话不多说，一起看看它是怎么实现的吧。根据已有的web audio API知识，实践音频可视化，自我总结，步骤大致分为以下几步：</p>
<ol>
<li>创建音频环境</li>
<li>获取音频，创建buffer节点</li>
<li>解码音频，分析音频</li>
<li>连接音频输入输出</li>
<li>canvas绘制频谱</li>
<li>连接播放</li>
</ol>
<h5 id="创建音频环境AudioContext"><a href="#创建音频环境AudioContext" class="headerlink" title="创建音频环境AudioContext"></a>创建音频环境AudioContext</h5><p>音频环境是所有音效操作的前提，好比canvas的画布，先有个做画之地，再来笔墨横姿</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Webkit&#x2F;blink browser require a prefix, and it needs the window object specifically declared to work in Safari</span><br><span class="line">window.AudioContext &#x3D; window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;</span><br><span class="line">window.requestAnimationFrame &#x3D; window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; declare new audio context</span><br><span class="line">try &#123;</span><br><span class="line">    var audioCtx &#x3D; new AudioContext();</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">    alert(&#39;Your browser does not support AudioContext!&#39;);</span><br><span class="line">    console.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获取音频，创建buffer节点"><a href="#获取音频，创建buffer节点" class="headerlink" title="获取音频，创建buffer节点"></a>获取音频，创建buffer节点</h5><p>首先获取音频，也就是说拿到这个素材输入之后，我们可以赶制加工，这里通过XMLHttpRequest获取，将请求的返回类型设为<strong>“arraybuffer”</strong>，方便音频数据处理；另外，创建音频节点<strong>createBufferSource</strong>，来获取输入的音频。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; use XHR to load an audio track, and</span><br><span class="line">&#x2F;&#x2F; decodeAudioData to decode it and stick it in a buffer.</span><br><span class="line">&#x2F;&#x2F; Then we put the buffer into the source</span><br><span class="line">var xhr &#x3D; new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化 HTTP 请求参数, 配置请求类型，文件路径等</span><br><span class="line">xhr.open(&#39;GET&#39;, &#39;audio&#x2F;music1.mp3&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将responseType设为arraybuffer,二进制数据</span><br><span class="line">xhr.responseType &#x3D; &quot;arraybuffer&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取完成，对音频进一步操作，解码</span><br><span class="line">xhr.onload &#x3D; function() &#123;</span><br><span class="line">    var audioData &#x3D; xhr.response;</span><br><span class="line">    &#x2F;&#x2F; Get an AudioBufferSourceNode.</span><br><span class="line">    &#x2F;&#x2F; This is the AudioNode to use when we want to play an AudioBuffer</span><br><span class="line">    var source &#x3D; audioCtx.createBufferSource();</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="解码音频，分析音频"><a href="#解码音频，分析音频" class="headerlink" title="解码音频，分析音频"></a>解码音频，分析音频</h5><p>好的，现在我们拿到了音乐，但计算机仍然不懂，需要对其进行解码<strong>decodeAudioData</strong>。<br>一看到解码后的数据，我们不能让计算机“啪啪啪”就来吧，观个全局，做个自我分析，<strong>createAnalyser</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">audioCtx.decodeAudioData(audioData, function(buffer) &#123;</span><br><span class="line">        &#x2F;&#x2F; set the buffer in the AudioBufferSourceNode</span><br><span class="line">        source.buffer &#x3D; buffer;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; create audio node to play the audio in the buffer</span><br><span class="line">        var analyser &#x3D; audioCtx.createAnalyser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="连接音频输入输出"><a href="#连接音频输入输出" class="headerlink" title="连接音频输入输出"></a>连接音频输入输出</h5><p>必经之路，input ——&gt; 音频处理 ——&gt; 输出，connect连接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; connect the analyser to the destination(the speaker), or we won&#39;t hear the sound</span><br><span class="line">&#x2F;&#x2F; from audioCtx.createBuffer, or audioCtx.decodeAudioData</span><br><span class="line">source.connect(analyser);</span><br><span class="line">analyser.connect(audioCtx.destination);</span><br></pre></td></tr></table></figure>

<h5 id="canvas绘制频谱"><a href="#canvas绘制频谱" class="headerlink" title="canvas绘制频谱"></a>canvas绘制频谱</h5><p>大头戏，音乐播放捣鼓捣鼓还是有声音的，频谱怎么着，一头雾水。不着急，慢慢来，首先我们需要数据，数据怎么来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bufferLength &#x3D; analyser.frequencyBinCount,</span><br><span class="line">    dataArray &#x3D; new Uint8Array(bufferLength);</span><br><span class="line"></span><br><span class="line">analyser.getByteFrequencyData(dataArray);</span><br></pre></td></tr></table></figure>

<p>好，数据有了，计算机也能懂，怎么画，先说个简单的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var canvas &#x3D; document.getElementById(&#39;audio_canvas&#39;),</span><br><span class="line">    ctx &#x3D; canvas.getContext(&quot;2d&quot;),</span><br><span class="line">    c_width &#x3D; canvas.width,</span><br><span class="line">    c_height &#x3D; canvas.height;</span><br><span class="line"></span><br><span class="line">**************</span><br><span class="line">for(var i &#x3D; 0; i &lt; bufferLength; i++) &#123;</span><br><span class="line">     value &#x3D; dataArray[i];</span><br><span class="line">     ctx.fillStyle &#x3D; &#39;#f99&#39;;</span><br><span class="line">     ctx.fillRect(i, c_height - value, 1, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了，频谱图有了，但没有动效，不会变化，别急，利用<strong>requestAnimationFrame</strong>，同时这侧面反应了获取的dataArray数组的数值，出来的效果如此这般：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-c4a900a3dbf48d0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="数值"></p>
<p>可是我们想，如果把所有的数值都展现出来，一来太多，二来更耗资源，而且频率邻值是相似的，非智者所为，怎么处理呢？数学中有学过<strong>采样频率</strong>的方法，采样对于信息信号来说，是个常用的方式。根据画布长度，美观起见，让每一频占据一定宽度，各个频之间留些空隙，同时用数学逻辑思维换算，计算出画布可放的频数，也就是说画布上选择哪几个频率值显示，取相对应“编号”的频率，进行绘制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 条形的宽度</span><br><span class="line">var bar_width &#x3D; 10,</span><br><span class="line">    bar_gap &#x3D; 2,</span><br><span class="line">    bar_part &#x3D; bar_width + bar_gap,</span><br><span class="line">    bar_num &#x3D; Math.round(c_width &#x2F; bar_part);</span><br><span class="line"></span><br><span class="line">***************************************</span><br><span class="line">      function drawVisual() &#123;</span><br><span class="line">            var i &#x3D; 0, value;</span><br><span class="line">            </span><br><span class="line">            var bufferLength &#x3D; analyser.frequencyBinCount,</span><br><span class="line">                dataArray &#x3D; new Uint8Array(bufferLength);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 每段包含的频谱宽</span><br><span class="line">            var array_width &#x3D; Math.round(bufferLength &#x2F; bar_num);</span><br><span class="line"></span><br><span class="line">            analyser.getByteFrequencyData(dataArray);</span><br><span class="line"></span><br><span class="line">            ctx.clearRect(0,0,c_width,c_height)</span><br><span class="line"></span><br><span class="line">            for(i; i &lt; bar_num; i++) &#123;</span><br><span class="line">                value &#x3D; dataArray[i * array_width];</span><br><span class="line">               </span><br><span class="line">                ctx.fillStyle &#x3D; &#39;#f99&#39;;</span><br><span class="line">                ctx.fillRect(bar_part * i, c_height - value, bar_width, value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            animation_id &#x3D; requestAnimationFrame(drawVisual);</span><br><span class="line">            &#x2F;&#x2F; console.log(animation_id)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/2320147-e1415bd4e2861d3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="类似"></p>
<h5 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h5><p>如此一来，大致效果已经实现。在做的过程中，有一个问题需要思考： 动画什么时候停止，也就是说，如何在音乐播放结束的情况下，页面频谱流畅地回归空白，浏览器也不会继续动画，做到“该停止时就停止”。【实践结果证明，如果在音乐播放结束就停止动画或者清空，达不到想要的效果】</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-4f9e218932103d11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="立刻停止页面"></p>
<p>为了美观及更有趣味性，我们可以加个缓慢降落的条形；甚者，采取上传文件的形式，根据上传的音乐“舞动”自己的音浪，因频制浪。这里有个稍难的点：已经播放一首音乐的时候，如何做到继续上传，原音乐停止，新音乐播放并出现相应的频谱。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-2244d7d980289bd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="加条形.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-da6c6e64a176e345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="上传文件形式.png"></p>
<p>【代码存在于 <a href="https://github.com/smilewalker/audioVisual" target="_blank" rel="noopener">github</a>，仅供参考，敬请交流】</p>
<p>参考文章：<br><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0ahUKEwj9xpzE2K_SAhUNtJQKHQQMCu4QFggaMAA&amp;url=https%3a%2f%2fdeveloper%2emozilla%2eorg%2fzh-CN%2fdocs%2fWeb%2fAPI%2fFileReader&amp;usg=AFQjCNGz5Veo8Ux5iQ_w_1oFQc3fqNlynA" target="_blank" rel="noopener">https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0ahUKEwj9xpzE2K_SAhUNtJQKHQQMCu4QFggaMAA&amp;url=https%3a%2f%2fdeveloper%2emozilla%2eorg%2fzh-CN%2fdocs%2fWeb%2fAPI%2fFileReader&amp;usg=AFQjCNGz5Veo8Ux5iQ_w_1oFQc3fqNlynA</a><br><a href="http://www.cnblogs.com/Wayou/p/html5_audio_api_visualizer.html" target="_blank" rel="noopener">http://www.cnblogs.com/Wayou/p/html5_audio_api_visualizer.html</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API</a><br><a href="https://forestmist.org/blog/web-audio-api-loops#source" target="_blank" rel="noopener">https://forestmist.org/blog/web-audio-api-loops#source</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>JavaScript</tag>
        <tag>web audio api</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈英语/美/的元音</title>
    <url>/2020/04/17/%E8%B0%88%E8%B0%88%E7%BE%8E%E5%BC%8F%E8%8B%B1%E8%AF%AD%E7%9A%84%E5%85%83%E9%9F%B3/</url>
    <content><![CDATA[<p>平时我们经常说元音辅音，常念叨的aeiou，那么什么是元音呢？<br>现在一起来看看美音音标中的元音：</p>
<p><strong>/æ/</strong>: fat, bad, dad  //嘴角向两边张开，上下齿高度为食指中指指尖叠加高度；舌头下贴，向后收紧<br><strong>/e/</strong>: check, bed<br><strong>/i:/</strong>:feed, sheet //嘴唇向两边收紧，扁唇；舌头在口腔里向后收紧<br><strong>/I/</strong>: sick, it, sit //嘴唇放松，舌头处于正常位置，放松，⚠️/i：/与/I/的主要区别不是长短，而是紧松<br><strong>/ɔ/</strong>: law, wall, lord, short //上下张口，口型呈椭圆形，像鸡蛋，略撅嘴<br><strong>/a/</strong>: boss, lock, cop, hot //上下张大嘴巴，把舌头贴在口腔底部，舌尖触碰下齿<br><strong>/∂/</strong>: first, sir, curse, herd //嘴唇放松，舌头位于正常位置，放松<br><strong>/u:/</strong>:fool, shoe, whose, food //双唇收圆，小圆唇<br><strong>/ʊ/</strong>: good, look, full //双唇稍撅<br><strong>/ei/</strong>: claim, fate, sake<br><strong>/ai/</strong>: fire, I ,might, like<br><strong>/ɔi/</strong>: boy, boil, noise<br><strong>/∂u/</strong>: spoke, show, low, most<br><strong>/au/</strong>: announcement, down, ouch<br><strong>/i∂/</strong>: ear, here, atmosphere<br><strong>/e∂/</strong>: where, share, there<br><strong>/u∂/</strong>: sure, tourist</p>
<p>美式发音中不存在的音： /^/，/∂：/，/ɔ：/</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>元音</tag>
        <tag>美音</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端收藏的网站</title>
    <url>/2017/03/13/web%E5%89%8D%E7%AB%AF%E6%94%B6%E8%97%8F%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>整理了目前自己在开发前端中收藏的网站，觉得不错的分享给大家，个人看法，若有更好，可以推荐交流：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-a3c8ca137a858497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="Paste_Image.png"></p>
<a id="more"></a>
<p>“不要因为也许会改变<br>就不肯说出那句美丽的誓言<br>不要因为也许会分离<br>就不敢求一次倾心的相遇<br>总有一些什么<br>会留下来的吧<br>留下来作一件不灭的印记<br>好让 好让那些<br>不相识的人也能知道<br>我曾经怎样深深地爱过你”<br>—— 题记，引自 席慕容｀《印记》</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>整理了目前自己在开发前端中收藏的网站，觉得不错的分享给大家，个人看法，若有更好，可以推荐交流：<br><img src="http://upload-images.jianshu.io/upload_images/2320147-a3c8ca137a858497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt="Paste_Image.png"></p>
<ol>
<li><p><a href="https://www.w3.org/" target="_blank" rel="noopener">W3C</a><br>这个不解释，基本常识，w3cschool 也可以，阅读性可能会更高些<br><img src="http://upload-images.jianshu.io/upload_images/2320147-1da2ea86f261c490.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="w3c.png"></p>
</li>
<li><p><a href="https://github.com/" target="_blank" rel="noopener">github</a><br>必备网站<br><img src="http://upload-images.jianshu.io/upload_images/2320147-fa0a2e2923ddc4b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github.png"></p>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/" target="_blank" rel="noopener">MDN</a><br>类似W3C，推荐，一些知识可能还没有中文，可以帮忙添加中文翻译，让更多的人看到<br><img src="http://upload-images.jianshu.io/upload_images/2320147-5915a3934d3e5d48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MDN.png"></p>
</li>
<li><p><a href="http://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a><br>程序界的问答网站<br><img src="http://upload-images.jianshu.io/upload_images/2320147-7d7cef0c7ef1d64b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="stackoverflow.png"></p>
</li>
<li><p><a href="http://caniuse.com/#home" target="_blank" rel="noopener">caniuse</a><br>检测浏览器对web属性方法的支持<br><img src="http://upload-images.jianshu.io/upload_images/2320147-897a98c74bf93849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="caniuse.png"></p>
</li>
<li><p><a href="https://validator.w3.org/" target="_blank" rel="noopener">validator</a><br>W3C检查代码格式<br><img src="http://upload-images.jianshu.io/upload_images/2320147-39c0aad9b980b440.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="validator.png"></p>
</li>
<li><p><a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a><br>图片压缩<br><img src="http://upload-images.jianshu.io/upload_images/2320147-6a9b9974cec4ce53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tinypng.png"></p>
</li>
<li><p><a href="http://codepen.io/pens/" target="_blank" rel="noopener">codepen</a><br>前端设计开发平台，可展示，欣赏，开发，也可找效果灵感<br><img src="http://upload-images.jianshu.io/upload_images/2320147-9432bd47e24d8412.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="codepen.png"></p>
</li>
<li><p><a href="http://www.csdn.net/" target="_blank" rel="noopener">csdn</a><br>csdn也不错，技术交流，写博客<br><img src="http://upload-images.jianshu.io/upload_images/2320147-6f6890fa4c7b6b02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="csdn.png"></p>
</li>
<li><p><a href="https://ruby-china.org/" target="_blank" rel="noopener">ruby-china</a><br>ruby china 交流社区<br><img src="http://upload-images.jianshu.io/upload_images/2320147-8f4c8948856da196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ruby.png"></p>
</li>
<li><p><a href="https://jsfiddle.net/dzn23wrr/" target="_blank" rel="noopener">jsfiddle</a><br>在线开发代码平台<br><img src="http://upload-images.jianshu.io/upload_images/2320147-e6c050a85fc3c2ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jsfiddle.png"></p>
</li>
<li><p><a href="https://css-tricks.com/" target="_blank" rel="noopener">css-tricks</a><br>围绕CSS，Tips, Tricks, and Techniques on using Cascading Style Sheets.<br><img src="http://upload-images.jianshu.io/upload_images/2320147-91d21e6db43a3e48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css.png"></p>
</li>
<li><p><a href="http://www.jianshu.com/" target="_blank" rel="noopener">简书</a><br>文章方面推荐<br><img src="http://upload-images.jianshu.io/upload_images/2320147-afc298939a0622f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="简书.png"></p>
</li>
</ol>
<p>下面罗列的偏向设计，前端可以看看：</p>
<ol>
<li><p><a href="https://dribbble.com/" target="_blank" rel="noopener">dribbble</a><br>在线设计社区<br><img src="http://upload-images.jianshu.io/upload_images/2320147-a7657a37f01ac2bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dribbble.png"></p>
</li>
<li><p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank" rel="noopener">subtlepatterns</a><br>背景素材网站，不错<br><img src="http://upload-images.jianshu.io/upload_images/2320147-24d786d40a231773.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="subtlepatterns.png"></p>
</li>
<li><p><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a><br>阿里巴巴旗下，icon<br><img src="http://upload-images.jianshu.io/upload_images/2320147-667e49568e53c5a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iconfont.png"></p>
</li>
<li><p><a href="https://www.iconfinder.com/" target="_blank" rel="noopener">iconfinder</a><br>icon网站，也可以<br><img src="http://upload-images.jianshu.io/upload_images/2320147-5bfa0c2932cb7396.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iconfinder.png"></p>
</li>
<li><p><a href="http://www.lanrentuku.com/" target="_blank" rel="noopener">lanrentuku</a><br>懒人图库也不错<br><img src="http://upload-images.jianshu.io/upload_images/2320147-d6732526c5be3575.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="lanrentuku.png"></p>
</li>
<li><p><a href="http://huaban.com/" target="_blank" rel="noopener">huaban</a><br>花瓣网，设计<br><img src="http://upload-images.jianshu.io/upload_images/2320147-c96df3981791a306.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="花瓣.png"></p>
</li>
</ol>
<p>当然可能还有更好的网站，以上是个人认为还不错的，敬请交流~</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>web之GPU 动画：正确的打开方式</title>
    <url>/2016/12/22/web%E4%B9%8BGPU%E5%8A%A8%E7%94%BB%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>译者序：原文<a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/" target="_blank" rel="noopener">GPU Animation: Doing It Right</a>，发表于2016年12月6日，本文是对该篇的中文翻译，如有帮助，作为译者，也深感欣慰。<br>附原文链接：<a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/" target="_blank" rel="noopener">https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/</a></p>
<a id="more"></a>

<p>译者序：原文<a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/" target="_blank" rel="noopener">GPU Animation: Doing It Right</a>，发表于2016年12月6日，本文是对该篇的中文翻译，如有帮助，作为译者，也深感欣慰。<br>附原文链接：<a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/" target="_blank" rel="noopener">https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/</a></p>
<p><strong>目前，大部分人都知道现代浏览器是使用GPU来渲染web的部分页面，尤其是带有动画的。举个例子，一个使用<code>transform</code>的css动画看起来会比使用<code>left</code>和<code>top</code>属性的更为流畅。但是如果你问，“我是如何从GPU获得平滑的动画？”多数情况下，你可能会听到比如“使用 <code>transform: translateZ(0)</code> 或者 <code>will-change: transform</code>。”的回答。</strong></p>
<p>这些属性好比如我们在IE6使用<code>zoom：1</code>（如果你懂我的意思），用于准备GPU的动画——或者<strong>合成（compositing）</strong>，浏览器供应商喜欢这么称它。</p>
<p>但有时，简单演示中运行的很好很流畅的动画，在真实网站却很慢，引起视觉错误甚至导致浏览器崩溃。为什么会产生这种现象？<strong>我们如何修复它？</strong>接下来一起试着理解吧。<br>###免责声明<br>在我们深入GPU的合成前，我想告诉你一件重要的事：这是一个<strong>巨大的hack</strong>。你不会在<a href="https://www.w3.org/" target="_blank" rel="noopener">W3C</a>的规范里（至少目前来说）找到任何关于合成（compositing ）如何工作的资料，如何显式地在合成层上放置元素，甚至于合成本身。它只是浏览器用于执行确定任务的优化，并且每个浏览器供应商以自己的方式实现。</p>
<p>你在这篇文章学到的一切，不是官方说明文档，而是我个人实验的结果，夹杂着一点常识和不同浏览器子系统运行原理的知识。部分可能绝对是错的，部分可能随着时间而变化——这个要事先说明！</p>
<p>###合成（Compositing ）的工作原理<br>为了准备GPU动画的页面，我们需要理解浏览器的工作原理，而不仅仅是听取来自网上或本文的随意建议。</p>
<p>比如说一个页面有 <code>A</code> 和 <code>B</code>的元素，均为绝对定位<code>position: absolute</code>，带着不同的 <code>z-index</code>。浏览器将会从CPU绘制，然后把生成的图像发送给GPU——于屏幕上显示结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#a, #b &#123; position: absolute; &#125;</span><br><span class="line">#a &#123;</span><br><span class="line">  left: 30px; </span><br><span class="line">  top: 30px; </span><br><span class="line">  z-index: 2;</span><br><span class="line">&#125;</span><br><span class="line">#b &#123; z-index: 1; &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;a&quot;&gt;A&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;b&quot;&gt;B&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-70987315f62301d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1"></p>
<p>现在用<code>left</code>属性和css的animation，来移动<code>A</code>元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#a, #b &#123; position: absolute; &#125;</span><br><span class="line">#a &#123;</span><br><span class="line">  left: 30px; </span><br><span class="line">  top: 30px; </span><br><span class="line">  z-index: 2;</span><br><span class="line">  animation: move 1s linear;</span><br><span class="line">&#125;</span><br><span class="line">#b &#123; z-index: 1; &#125;</span><br><span class="line">@keyframes move &#123; </span><br><span class="line">  from &#123; left: 30px; &#125; </span><br><span class="line">  to &#123; left: 100px; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;a&quot;&gt;A&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;b&quot;&gt;B&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-e3bf6b8dac8cb1dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2"></p>
<p>在这种情况下，对于每个动画帧，浏览器都会重新计算元素的几何形状(即回流reflow)，渲染页面新状态的图像 (即重绘repaint)，然后再次将其发给GPU以显示在屏幕。我们知道重绘是很耗性能成本的，每个现代浏览器都足够快速的来重绘页面改变的部分，而不是整个页面。浏览器在多数情况下能都很快地重绘，但我们的动画依旧不平滑。</p>
<p>在动画的每一步（甚至递增）进行回流和重绘整个页面，听起来真的很慢，特别是对于一个庞大复杂的布局。而绘制两个独立的图像会更有效——一个是<code>A</code>元素，一个是没有<code>A</code>元素的整个页面——然后简单的相对彼此偏移那些图像。换句话来说，<strong>合成（composing）</strong>缓存的元素图像会更快。这也是GPU闪光的地方：它能快速合成带有<strong>亚像素精度</strong>的图像，为动画添加“性感“的平滑度。</p>
<p>为了优化合成，浏览器得确保css的动画属性：</p>
<ul>
<li>不影响文档流，</li>
<li>不依赖于文档流，</li>
<li>不会造成重绘。</li>
</ul>
<p>有人会认为带有<code>position: absolute</code>以及<code>fixed</code>的<code>top</code>和<code>left</code>属性，不依赖于其环境，但事实并非如此。比如说，值为百分比的<code>left</code>属性，会取决于<code>.offsetParent</code>的大小；同样，<code>em</code>, <code>vh</code>以及其他单位也会取决于自身环境。而<code>transform</code>和<code>opacity</code>是css唯一会满足上述情况的属性。<br>下面用<code>transform</code>代替<code>left</code>来动画：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#a, #b &#123; position: absolute; &#125;</span><br><span class="line">#a &#123;</span><br><span class="line">  left: 30px; </span><br><span class="line">  top: 30px; </span><br><span class="line">  z-index: 2;</span><br><span class="line">  animation: move 1s linear;</span><br><span class="line">&#125;</span><br><span class="line">#b &#123; z-index: 1; &#125;</span><br><span class="line">@keyframes move &#123; </span><br><span class="line">  from &#123; transform: translateX(0); &#125;</span><br><span class="line">  to &#123; transform: translateX(70px); &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;a&quot;&gt;A&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;b&quot;&gt;B&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>这里，我们<strong>声明式</strong>地描述了动画：它的开始位置，结束位置，持续时间等。它将提前告诉浏览器css的更新属性。因为浏览器如果知道没有任何属性会导致回流或重绘，它可以应用合成优化：绘制<strong>合成层（compositing layers）</strong>的图像并发给GPU。</p>
<p>这种优化的优点在哪？</p>
<ul>
<li>得到一个带有亚像素精密度的柔顺平滑动画，运行在特别为图形任务的优化的单元上，并且非常快。</li>
<li>动画不再绑定到CPU。即使运行一个强化的JavaScript任务，动画依然会快速执行。</li>
</ul>
<p>一切看起来如此的清楚和简单，对吧，那会遇到什么问题呢？一起来看看这种优化方式是如何工作的。</p>
<p>它可能会让你震惊，GPU竟是一个<strong>独立的计算机</strong>。是的，每个现代设备的重要部分通常都是独立单元，有自己的处理器，自己的内存和数据处理模块。就像其他任何应用程序或者游戏一样，浏览器需要用外部设备跟GPU通信。</p>
<p>为了更好的理解它是怎么工作的，想想AJAX吧。假使你要提交用户输入的数据，你不会告诉远程服务器，“嗨，过来获取这些输入框的数据和JS变量，并保存到数据库。”远程服务器不能访问用户浏览器的内存。取而代之的是，你需要从页面保存这些数据到可以轻松解析的简单数据格式（如JSON）的有效内容中，并发送给远程服务器。</p>
<p>合成也是如此。GPU就像远程服务器，浏览器需要首先创建一个有效载荷，然后发送到设备。当然，GPU没有距离CPU数千米长；它就在旁边。然而，鉴于多数情况，远程服务器请求和返回允许2秒，对于GPU的数据转换的额外3~5毫秒会导致糟糕的动画。</p>
<p>什么是GPU的有效载荷？多数情况下，它包含了<strong>层图像</strong>，以及附加的说明比如大小，偏移量，以及动画参数。下面大致的写了有效负载及GPU传输的数据：</p>
<ul>
<li>绘制每个合成层成独立图像。</li>
<li>准备层数据（例如大小，偏移量，透明度）</li>
<li>准备动画的着色（如果用到的话）</li>
<li>发送GPU数据</li>
</ul>
<p>如你所见，每当为元素添加<code>transform: translateZ(0)</code>或者<code>will-change: transform</code>，你会开始同样的过程。而重绘是很耗性能成本的，这里它会更慢。多数情况下，浏览器不能进行递增的重绘，它会去绘制之前覆盖了新合成层的区域。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-03c54fb508a6c322.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>###隐式合成（Implicit Compositing）</p>
<p>回到我们刚才<code>A</code>和<code>B</code>的例子。之前，我们动画处于所有元素上层的<code>A</code>，导致有两个合成层：一是<code>A</code>元素，另一个是<code>B</code>元素和整个页面背景（也就是没有<code>A</code>）。<br>现在，我们让<code>B</code>动画。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-5a3a8ef95b9caa33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始状态"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-fb875922ac8302ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="移动状态"></p>
<p>我们陷入了逻辑问题。<code>B</code>元素应该是一个独立的合成层，最终的层图像应该在GPU被合成。但是<code>A</code>元素应该出现在<code>B</code>的上面，我们并没有定义关于<code>A</code>的任何东西来推动它在自己层。</p>
<p>记住那个<strong>大的声明</strong>：特殊的GPU-合成(GPU-compositing)模式并不是CSS规范的一部分；它只是浏览器内部应用的优化。因为定义了<code>z-index</code>，<code>A</code>肯定是在<code>B</code>上方。而浏览器会做些什么呢？</p>
<p>它将会强制创建一个包含<code>A</code>的新合成层，当然，添加了另一个重绘：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-2e62078255e25d9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例"></p>
<p>它被称为<strong>隐式合成 implicit compositing</strong>：以堆叠顺序应当出现在合成上的一个或多个非合成元素被提升为复合层 —— 即，被绘制为分离的图像，然后将其发送到GPU。</p>
<p>我们在隐式合成里犯的错远比你想象的还要多。浏览器提升元素为合成层是有很多原因的，下面列了几条：</p>
<ul>
<li>3D变换： <code>translate3d</code>, <code>translateZ</code>等；</li>
<li><code>&lt;video&gt;</code>,<code>&lt;iframe&gt;</code>元素；</li>
<li>通过<code>Element.animate()</code>来改变<code>transform</code>, <code>opacity</code></li>
<li>通过css的transitions和animations改变<code>transform</code>, <code>opacity</code>；</li>
<li><code>position: fixed</code>;</li>
<li><code>will-change</code></li>
<li><code>filter</code></li>
</ul>
<p>可以看“<a href="https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/graphics/CompositingReasons.h?q=file:CompositingReasons.h" target="_blank" rel="noopener">CompositingReasons.h</a>” 的文章，有更多关于谷歌浏览器的解释。</p>
<p>看起来GPU动画的主要问题似乎是意想不到的重绘，事实上并不是，最大的问题是……<br>###内存消耗<br>再一次温馨提醒，GPU是独立式计算机：它不仅要将渲染的层图像发送给GPU，而且要<strong>存储</strong>它们便于在以后动画的重用。</p>
<p>那么单个合成层需要多少内存？举个例子，猜想下，保存一个填充色为<code>#FF0000</code>的320*240的矩形，需多少内存。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-c670b8e674d656e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>典型的web开发者会去想，“这是一个纯色图。我会把它作为png来保存，再检查大小，应该比1KB小。”毫无疑问，他们是正确的，这种图片作为png是104字节（byte）。</p>
<p>问题是PNG，或JPEG，GIF等用来存储以及传输图像数据。为了将图像绘制到显示器上，计算机需要分析图像格式，然后<strong>表示为像素数组/矩阵</strong>。所以，我们的示例图片将会占<code>320 × 240 × 3 = 230,400 bytes</code>的计算机内存。也就是说，我们要将图像的宽乘高来获取图片的像素数。然后，我们再乘3，因为每个像素由3个字节（RGB）描述。如果图像包含透明区域，我们需要乘4，因为需要额外的字节来描述透明度：（RGBa）：<code>320 × 240 × 4 = 307,200 bytes</code>。</p>
<p>浏览器总是将合成层绘制为RGBa图像，看起来似乎没有有效的方法来判断元素是否包含透明区域。</p>
<p>举个更可能的例子：10张图片的轮播效果，每张800*600像素。我们需要在用户交互（如拖动）时让图片之间进行平滑的切换，因此我们为每个图片添加了<code>will-change: transform</code>。这会事先将图片提升为合成层，以便在用户交互时立即转换。如此一来，计算机显示轮播图需要的内存是： 800 × 600 × 4 × 10 ≈ <strong>19 MB</strong>。</p>
<p>19MB的额外内存被用来渲染单个控件！如果你是现代web开发者，正在创建单页面网站，并有很多动画控件、视差效果、高分辨率图像以及其他视觉增强，那么每页额外的100~200MB才刚开始。添加隐式合成到混合（承认吧——你以前从没想过这个），那你将会结束掉设备的所有可用内存。</p>
<p>此外，多数情况下，这些显示相同结果的内存将会被浪费。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-e825f1c1f487bf11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例"></p>
<p>这对桌面客户端来说可能不是一个问题，但它真的会损害移动端用户。首先，现代的很多设备有高密度屏幕：合成层图像的权重要乘4<del>9。其次，移动设备并没有台式机那么大的内存。例如，现在的iphone 6有1GB的共有内存（即内存既用于RAM，也用于VRAM）。考虑到至少1/3的内存被用于操作系统和后台进程，另1/3被用于浏览器和现在的页面（对于高度优化的没有大量框架的页面），我们最后会有大约200</del>300MB留给GPU效果。而iphone 6 是相当昂贵的高端设备；很多手机的内存会更少。</p>
<p>你可能会问，“在GPU存储PNG图片来减少内存空间可能吗？”技术上说，有可能。问题是GPU是<a href="http://www.html5rocks.com/en/tutorials/webgl/shaders/" target="_blank" rel="noopener">逐像素地绘制屏幕</a>，意味着要将完整的PNG图像解码成一个一个的像素。我怀疑这种情况下的动画比每秒1帧更快。</p>
<p>值得一提的是，针对GPU的 <a href="https://en.wikipedia.org/wiki/Texture_compression" target="_blank" rel="noopener">图像压缩格式</a>是存在的，但是在压缩比方面不如PNG或JPEG，而且功能会受硬件的影响。</p>
<p>###优缺点<br>现在我们学到一些GPU动画的基础，一起总结下它的优缺点吧。</p>
<p>优点：</p>
<ul>
<li>这种动画更快更平滑，达到每秒60帧。</li>
<li>正确制作的动画在单独的线程运行，不会被JS的计算所阻塞。</li>
<li>3D转换比较“廉价”。</li>
</ul>
<p>缺点</p>
<ul>
<li>额外的重绘将元素提升至合成层。有时候这是很慢的（即我们获取整个层的重绘，而不是增量的部分）。</li>
<li>绘制层必须传输给GPU。根据层的数量和尺寸，传输可能会很慢，而导致中低端的设备产生闪烁现象。</li>
<li>每个合成层消耗额外的内存。而内存是移动端的宝贵资源，过度的内存使用会造成<strong>浏览器的崩溃</strong>。</li>
<li>如果不考虑隐式合成，缓慢地重绘，极有可能发生额外的的内存使用和浏览器崩溃。</li>
<li>我们会看到视觉失真，比如某些情况下Safari里渲染的文字和页面内容消失或被扭曲。</li>
</ul>
<p>如你所见，GPU动画虽然有着实用独特的优点，但也有不好的问题。其中最重要的是重绘和过度的内存使用；而下面涵盖的所有优化技术将解决这些问题。</p>
<p>###浏览器设置</p>
<p>在优化前，我们需要了解那些能帮助检查页面合成层，以及提供有关优化效果的明确反馈的工具。</p>
<p>#####SAFARI<br>Safari的web检查器（Web Inspector）有个“layers”边栏，来显示所有合成层及内存消耗，合成原因。来看这个边栏：</p>
<ol>
<li>在Safari中，利用<code>⌘ + ⌥ + I</code>打开web检查器，如果没用，选择左上角的“preferences”——&gt; “Advanced” ，勾选“Show Develop Menu in menu bar”选项，然后重试。</li>
<li>web检查器打开后，选择“Elements”选项，并在右侧边栏选择“Layers”。</li>
<li>现在点击“Elements”主面板的DOM节点，你将会看到选中元素的layers信息（如果它用了合成）以及派生的层。</li>
<li>单击派生层查看合成原因。浏览器将告诉你为什么将该元素移动到自己的合成层。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-46b78c354e3cf9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例">)<br>(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/11/safari-large-opt.png" target="_blank" rel="noopener">查看大图</a>)</p>
<p>#####CHROME</p>
<p>chrome的DevTools有类似的面板，但要先启动标记：</p>
<ol>
<li>在chrome中，前往<code>chrome://flags/#enable-devtools-experiments</code>，启动 “Developer Tools experiments”（开发者工具实验性功能） 的标记。</li>
<li>Mac利用<code>⌘ + ⌥ + I</code>打开DevTools，PC利用<code>Ctrl + Shift + I</code>，后点击右上角的如下图标，选择“Settings”选项。</li>
<li>转入“Experiments” 面板，勾选 “Layers”选项。</li>
<li>重新打开DevTools，你将看到“Layers”面板。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-a2b0c6e93ba05810.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PC"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-d6a05e0d42a6c209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PC"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-8ca8de109ca432d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Mac">)<br>(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/11/chrome-large-opt.png" target="_blank" rel="noopener">查看大图</a>)</p>
<p>该面板将当前页面的所有活动合成层显示为树。选择某个层，你会看到相关信息如大小(size)，内存消耗(memory consumption)，重绘次数(repaint count)以及合成原因(reason for being composited)。</p>
<p>###优化建议</p>
<p>已经设置好环境后，我们开始优化合成层。之前确定合成的主要两个问题：额外的重绘（造成GPU的数据传输问题），以及额外的内存消耗。因此，下面的所有优化建议将针对上述问题：</p>
<p>#####避免隐式合成<br>这是最简单也最重要的建议，是的，很重要。再次提醒，所有非合成的DOM元素带有显示合成原因（如<code>position: fixed</code>, video，css animation）将会被强制提升为自己层，便于GPU的最终图像合成。在移动端，这可能会导致动画非常缓慢。</p>
<p>举个例子（<a href="http://codepen.io/sergeche/pen/jrZZgL" target="_blank" rel="noopener">查看代码链接，戳此进</a>）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-b671951236278765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="html"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-4b64ee278970fcfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css"></p>
<p><code>A</code>元素要在用户交互时进行动画。如果在“Layers”面板看这页面，你会看到，它并没有多余的层。而点击“play”按钮后，你会看到多层，这些图层在动画完成后立即删除。如果在“TimeLine”面板看该过程，你会看到动画的开始和结束都伴随着大面积的重绘。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-3e91087d076759b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例.png"></p>
<p>(<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/11/chrome-timeline-large-opt.png" target="_blank" rel="noopener">查看大图</a>)</p>
<p>浏览器是这么一步步做的：</p>
<ol>
<li>当页面加载好后，浏览器若找不到合成原因，它会选取最佳策略：在单个背景层上绘制页面所有内容。</li>
<li>当点击“play”按钮时，我们显然看到增加了元素<code>A</code>的合成——因为<code>transform</code>属性。当浏览器确定堆叠顺序的元素<code>A</code>是在元素<code>B</code>的下面，所以它提升<code>B</code>为自己的合成层（隐式合成）。</li>
<li>提升至合成层总会造成重绘：浏览器必须为元素创建新的纹理，并将其从之前的层删除。</li>
<li>新的图层必须传输给GPU，便于用户在屏幕上看到最终的图像合成。根据层数，纹理大小和内容复杂度，需大量时间来执行重绘和数据传输。这也就是为什么我们有时会看到动画开始或结束时元素在闪烁。</li>
<li>动画完成后，我们去除了元素<code>A</code>合成的原因，那么，浏览器看到已经不需要合成了，就会回退到最佳策略：页面所有内容都在一个层，这也就意味着背景层需重新绘制<code>A</code>和<code>B</code>（另一个重绘），并将新的纹理发给GPU。上述的步骤也就导致了闪烁。</li>
</ol>
<p>为了摆脱隐式合成问题和减少视觉差异，我建议以下方法：</p>
<ul>
<li>试着用<code>z-index</code>将动画的元素保持尽可能高。理论上，这些元素应该是<code>body</code>的直接子元素。当然，当动画元素嵌套在DOM树内且依赖正常流，这标记并不总是可能的。这种情况下，你可以克隆元素并将其放在body中仅用于动画。</li>
<li>你可以给浏览器一个<code>wiil-change</code>的提示，表示准备合成。设置元素该属性，浏览器将（但不总是）提前将其提升至合成层，以便动画平滑的开始结束。但不要滥用该属性，否则内存将大大增加！</li>
</ul>
<p>#####动画用<code>TRANSFORM</code>和<code>OPACITY</code>属性</p>
<p><code>transform</code>和<code>opacity</code>属性保证既不影响正常流，也不影响DOM环境（即，不会造成回流或重绘，动画可以完全转移到GPU）。基本上，这意味着你可以有效的处理动画移动，缩放，旋转，透明度，以及变换。有时你可能想用这些属性模仿其他动画类型。</p>
<p>举个简单的例子：背景颜色的过渡。基本方法是添加<code>transition</code>属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;bg-change&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#bg-change &#123; </span><br><span class="line">width: 100px; </span><br><span class="line">height: 100px; </span><br><span class="line">background: red; </span><br><span class="line">transition: background 0.4s;</span><br><span class="line">&#125;</span><br><span class="line">#bg-change:hover &#123; background: blue;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>这种情况下，动画完全在CPU上运行，每一步都会重绘。而我们可以在GPU上实现同样的效果：取代<code>background-color</code>属性，我们在顶部添加一个层来变化它的opacity：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;bg-change&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#bg-change &#123; </span><br><span class="line">width: 100px; </span><br><span class="line">height: 100px; </span><br><span class="line">background: red;</span><br><span class="line">&#125;</span><br><span class="line">#bg-change::before &#123; </span><br><span class="line">background: blue; </span><br><span class="line">opacity: 0; </span><br><span class="line">transition: opacity 0.4s;</span><br><span class="line">&#125;</span><br><span class="line">#bg-change:hover::before &#123; opacity: 1; &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>这个动画更快更平滑，但是记住它会导致隐式合成和需要额外内存。这种情况大大减少内存消耗。</p>
<p>#####减少合成层的大小</p>
<p>看下面的图片，有发现不同么？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-d32102c85921289d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例.png"></p>
<p>这两个合成层<strong>视觉上是一样</strong>的，但第一个40000字节（39KB），第二个才400字节，少100倍。为什么？看代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;a&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;b&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#a, #b &#123; will-change: transform;&#125;</span><br><span class="line">#a &#123; width: 100px; height: 100px;&#125;</span><br><span class="line">#b &#123; width: 10px; height: 10px; transform: scale(10);&#125;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>不同点在于<code>#a</code>的物理尺寸是100*100像素（100*100*4=40000字节），而<code>#b</code>只有10*10像素大小（10*10*4=400字节），利用<code>transform: scale(10)</code>放大成100*100像素。<code>#b</code>是合成层，由于带了<code>will-change</code>属性，在最终图像绘制期间，<code>transform</code>完全是在GPU上发生。</p>
<p>技巧很简单：利用<code>width</code>和<code>height</code>属性减少物理大小，利用<code>transform: scale(…)</code>升级其纹理。当然，对于非常简单的纯色层来说，这个技巧极大地减少了内存的消耗。举个例子，如果你想动画一张大照片，你可以缩小它到5%到10%，然后放大它；用户可能看不出任何差别，你也节省出几兆的宝贵内存。</p>
<p>#####如果可以的话，利用CSS的transitions和animations</p>
<p>我们已经知道，通过<code>transform</code>以及<code>opacity</code>会自动创建合成层，并在GPU上运行。我们同样可以通过JavaScript来动画，但需要添加<code>transform: translateZ(0)</code>或<code>will-change: transform, opacity</code>来保证元素获得自己的合成层。</p>
<p><code>requestAnimationFrame</code>回调计算每个步骤，发生JavaScript动画，通过<a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/animate" target="_blank" rel="noopener">Element.animate()
</a>是一个有效的css动画声明。</p>
<p>一方面，通过css的transition或animation来创建简单重用的动画是很容易的；而另一方面，JS创建复杂的动画比css简单的多。此外，JavaScript是与用户交互的唯一的路径。</p>
<p>哪种方式更好？我们可以利用通用JavaScript库来动画元素么？</p>
<p>基于CSS的动画有个重要的特征：它是<strong>完全在GPU上运行</strong>的。因为你<strong>声明</strong>了动画应该怎么开始和结束，浏览器可以在动画开始前准备所有命令，并发给GPU。在<strong>命令式</strong>JavaScript的情况下，浏览器需要当前所有帧的状态。为了实现平滑的动画，我们需要在主浏览器线程计算新帧，然后每秒发送给GPU至少60次。除了计算和发送数据比css慢的多的事实外，它们还依赖于主进程的工作负载。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-cafbf3e36cd9d65b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例.png"></p>
<p>上述的范例里，你可以当主进程会被强化的JavaScript计算阻塞时会发生什么，而css动画不会被影响，因为新帧是在单独的线程里计算的，但JavaScript的动画需要等大量计算完成后才计算新帧。</p>
<p>因此，尽可能使用基于css的动画，特别是加载和进度指示，不仅更快，而且不会被大量JavaScript计算所阻塞。</p>
<p>###现实的优化实例</p>
<p>这篇文章是我在开发 <a href="https://ru.4game.com/chaos-fighters/" target="_blank" rel="noopener">Chaos Fighters</a>页面过程中调查和试验的结果。这是一个有着很多动画的手机游戏的响应推广页面。当开始开发时，我只知道如何产生基于GPU的动画，但并不知道它的工作原理。结果，第一个里程碑页面导致iphone5 —— 当时最新的Apple手机——在加载完页面后几秒内崩溃。而现在，即使是不太高级的手机，这个页面依然正常运行。</p>
<p>一起考虑这个页面的有趣优化。</p>
<p>页面最顶部是游戏介绍，类似红色的光线在背景中旋转。毫无疑问是个无限循环，没有交互，一个很好的css动画范例。第一个（误导）的尝试是保存光线图像作为<code>img</code>元素置于页面上，并使用无限的css动画。链接：[<a href="http://codepen.io/sergeche/pen/gwBjqG]" target="_blank" rel="noopener">http://codepen.io/sergeche/pen/gwBjqG]</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-23e07527b8ac308e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>一切都看起来很正常，但是光线的图片是很大的，移动端用户并不会高兴。</p>
<p>仔细观察图像。基本上，它只是来自图像中心的几条光线，而光线是相同的，所以我们可以保存单个光线图像，并反复利用达到最终效果。最终得到单光线图像，这远比初始图小的多。</p>
<p>针对这种优化，我们必须将<code>.sun</code>的标记复杂化，它是光线图像元素的容器。每一光线都有特定的旋转角度。(代码链接)[<a href="http://codepen.io/sergeche/pen/qaJraq]" target="_blank" rel="noopener">http://codepen.io/sergeche/pen/qaJraq]</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-4e914a9de2818c79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例.png"></p>
<p>视觉效果一样，但网络传输的数据量会少很多。合成层的尺寸都为500×500×4≈977KB。</p>
<p>弄的简单些，示例的光线图片很小，只有500*500像素。在真实的网站，设备的大小及像素分辨率并不相同（手机，平板，电脑），最终的图片大约是3000*3000*4=36MB！而这仅仅是页面上的一个动画元素。</p>
<p>再看下“Layers”面板的页面元素。我们已经让整个太阳旋转变得简单。因此，这个容器会被提升至合成层，被绘制成单一的大纹理图像，然后发给CPU。正因为我们的简化，纹理中包含了无用的数据：之间的缝隙。</p>
<p>更多来说，无用的数据比有用的还多！占据有限的内存资源并不是一个最好的方式。</p>
<p>这个问题的解决方案跟网络传输的优化相同：发送有用的数据（即光线）给GPU，我们可以计算节约了多大内存：</p>
<ul>
<li>太阳容器：500*500*4 = 977KB </li>
<li>12条线： 250*40*4*12 = 469KB </li>
</ul>
<p>内存消耗减少2倍。要做到这一点，我们<strong>分别动画每条线</strong>，替换整个容器。这样一来，只有光线图片会被发给GPU，之间的间隙不会占据任何资源。</p>
<p>我们不得不使标签复杂，以便单独对光线进行动画处理，而css的干扰也会更多。我们已经对线条初始旋转动画用了<code>transform</code>，然后开始每个动画一样的效果，旋转360度。基本上，我们需要创建一个单独的<code>@keyframes</code>部分，有很多传输的代码。</p>
<p>编写一个简短的JavaScript来处理光线初始放置，并允许对动画，光线数量等进行微调，这将变得更容易。见代码 [<a href="http://codepen.io/sergeche/pen/bwmxoz]" target="_blank" rel="noopener">http://codepen.io/sergeche/pen/bwmxoz]</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-da1c1f12d98b4711.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例"></p>
<p>新动画看起来跟之前一样，但内存消耗上少了2倍。</p>
<p>而且，在布局组成上，动画的太阳不是主要元素，而是背景元素。光线没有清晰的对比元素。这意味着，我们可以发略低分辨的光线图给GPU，随后将其升级，这帮我们减少一点内存消耗。</p>
<p>尝试将纹理大小减小10%。光线的物理大小是250*0.9*40*0.9=255*36像素。为了使光线看起来像250*20，我们将其放大250÷225≈1.111。</p>
<p>我们将添加一行代码<code>background-size: cover</code>给<code>.sun-ray</code>，便于背景图片自动调整，然后添加<code>transform: scale(1.111)</code>给光线。代码<a href="http://codepen.io/sergeche/pen/YGJOva" target="_blank" rel="noopener">http://codepen.io/sergeche/pen/YGJOva</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2320147-a7793adcc80d7063.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图例"></p>
<p>注意，我们只改变了元素的大小; PNG图像的大小保持不变。由DOM元素创建的矩形将作为GPU的纹理，而不是PNG图像。</p>
<p>太阳光线在GPU的合成大小是225×36×4×12≈380 KB（之前是469KB）。我们减少了大概19%的内存，并获得更灵活的代码，通过缩减来得到更佳质量——内存比。因此，增加简单动画的复杂性，减少了977÷380≈2.5倍的内存！</p>
<p>我想你已经注意到，这个解决方案有个重大的缺点：动画运行在CPU上会被JavaScript计算阻塞。如果你想更熟悉GPU操作动画，我提个作业。codepen上fork下<a href="https://codepen.io/sergeche/pen/YGJOva" target="_blank" rel="noopener">Codepen of the sun rays</a>，使其完全运行在GPU上，就像先前的例子一样高效灵活。在评论中发布你的代码以获得反馈。</p>
<p>###收获</p>
<p>对于Chaos Fighters 页面的优化使我重新思考开发现代网页的过程。这里列了几条我的主要原则：</p>
<ul>
<li>始终与客户，设计谈论网站上的所有动画和效果。这会大大影响页面的标签，以为更好的合成。</li>
<li>一开始注意合成层的数量和大小，特别是隐式合成层。浏览器的开发工具中的“Layers”面板是你最好的伙伴。</li>
<li>现代浏览器频繁使用合成，不仅用于动画，而且优化页面元素绘制。举个例子，<code>position: fixed</code>和<code>iframe</code>,<code>video</code>使用合成。</li>
<li>合成层的大小比数量更重要。某些情况下，浏览器会尝试减少合成层的数量（查看“<a href="https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome" target="_blank" rel="noopener">GPU Accelerated Compositing in Chrome</a>“的 “Layer Squashing”这一块），它防止了“层爆炸”并减少内存消耗，特别是层有巨大的交叉点时。有时候，这种优化具有负面影响，比如说一个大的纹理比几个小的层消耗更多内存。为了绕过这个优化，我给了<code>translateZ()</code>很小的值，比如说<code>translateZ(0.0001px)</code>，<code>translateZ(0.0002px)</code>。浏览器将确定元素位于3D空间的不同面板，因此跳过优化。</li>
<li>你不能仅添加<code>transform: translateZ(0)</code>或<code>will-change: transform</code>给任意元素，来虚拟提高动画性能或摆脱视觉差。GPU的合成要考虑弊端和取舍。当不使用时，合成会降低整体性能，最坏的情况导致浏览器崩溃。</li>
</ul>
<p>请允许我再次提醒：这不是GPU合成的官方规范，每个浏览器解决同一问题方式是不同的。本文某些内容在几个月后可能就过时了。例如，谷歌开发者正在探索如何减少CPU到GPU数据传输的开销，包括零复制开销的特殊共享内存的使用。此外，Safari已经能够将简单元素的绘制（比如说有<code>background-color</code>的空DOM元素）委托给GPU，而不是在CPU上创建图像。</p>
<p>无论如何，我希望这篇文章能帮助你更好地理解浏览器是如何使用GPU渲染的，以便您创建能在各设备下快速运行的令人印象深刻的网站了。</p>
<p><strong>###词汇介绍</strong>：</p>
<p> <em>1. 纹理(texture)</em>？</p>
<blockquote>
<p>这里的纹理是 GPU 的一个术语：可以把它想象成一个从主存储器(例如 RAM)移动到图像存储器(例如 GPU 中的 VRAM)的位图图像(bitmap image)。一旦它被移动到 GPU 中，你可以将它匹配成一个网格几何体(mesh geometry)，在 Chrome 中使用纹理来从 GPU 上获得大块的页面内容。[参考源自<a href="http://web.jobbole.com/85993/]" target="_blank" rel="noopener">http://web.jobbole.com/85993/]</a></p>
</blockquote>
<p><em>2. 回流（reflow）</em></p>
<blockquote>
<p>当渲染树（render Tree）中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流（reflow），也就是重新布局（relayout）。<br>每个页面至少需要一次回流，就是在页面第一次加载的时候。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。[参考源自<a href="http://web.jobbole.com/85993/]" target="_blank" rel="noopener">http://web.jobbole.com/85993/]</a></p>
</blockquote>
<p><em>3. 重绘（repaint）</em></p>
<blockquote>
<p>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如 background-color 。则就叫称为重绘。<br>值得注意的是，回流必将引起重绘，而重绘不一定会引起回流。<br>明显，回流的代价更大，简单而言，当操作元素会使元素修改它的大小或位置，那么就会发生回流。[参考源自<a href="http://web.jobbole.com/85993/]" target="_blank" rel="noopener">http://web.jobbole.com/85993/]</a></p>
</blockquote>
<p><em>4. 亚像素精度（subpixel precision）</em></p>
<blockquote>
<p>亚像素精度是指相邻两像素之间细分情况。输入值通常为二分之一，三分之一或四分之一。这意味着每个像素将被分为更小的单元从而对这些更小的单元实施插值算法。例如，如果选择四分之一，就相当于每个像素在横向和纵向上都被当作四个像素来计算。因此，如果一张5x5像素的图像选择了四分之一的亚像素精度之后，就等于创建了一张20x20的离散点阵，进而对该点阵进行插值。[来自百度百科]</p>
</blockquote>
<p>外文原文：<br><a href="https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-243&amp;utm_medium=email#one-big-disclaimer" target="_blank" rel="noopener">https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-243&amp;utm_medium=email#one-big-disclaimer</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>web</tag>
        <tag>gpu动画</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈美式英语的重读技巧</title>
    <url>/2020/04/16/%E8%8B%B1%E8%AF%AD%E7%9A%84%E9%87%8D%E8%AF%BB%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<p>英语中的单词与句子都有重弱读现象，重读音节的元音发音更响亮更长，那么一般如何对单词或句子进行重弱读分辨呢？</p>
<h2 id="音节是什么？"><a href="#音节是什么？" class="headerlink" title="音节是什么？"></a>音节是什么？</h2><p>英语的单词至少包含一个音节。音节一般以元音为主进行划分，每个音节一般由一个元音字母或一个元音字母组合加上一个或几个辅音构成。<br>单音节：eg. bag, book<br>双音节：eg. borrow，letter，daughter，email</p>
<h2 id="重读实词"><a href="#重读实词" class="headerlink" title="重读实词"></a>重读实词</h2><p>实词（表示实际意义）：主要动词，名词，adj，adv，否定词，wh词，感叹词，特殊重读</p>
<h2 id="双音节词读音规则："><a href="#双音节词读音规则：" class="headerlink" title="双音节词读音规则："></a>双音节词读音规则：</h2><ul>
<li>90%的名词，前一个音节重读。eg：office，problem，window，paper，building，mother，father</li>
<li>60%～70%的动词，后一个音节重读。eg：apply，agree，create，relax，complain，enjoy</li>
</ul>
<h2 id="后缀的重读规则"><a href="#后缀的重读规则" class="headerlink" title="后缀的重读规则"></a>后缀的重读规则</h2><ul>
<li>-ese重读后缀。eg：Chinese，Japanese</li>
<li>-eer重读后缀。eg：pioneer，volunteer，engineer</li>
<li>-ique重读后缀。eg：unique，antique，technique</li>
<li>-ic重读后缀前的音节。eg：realistic，elastic，elastic，strategic，optimistic，terrific</li>
</ul>
<h2 id="句子中单词重读依据"><a href="#句子中单词重读依据" class="headerlink" title="句子中单词重读依据"></a>句子中单词重读依据</h2><ul>
<li>实词重读，虚词（功能词）弱读</li>
<li>实意词+实意词，后一词通常重读。eg：Let’s go for a walk（重读）</li>
<li>谓语+宾语，宾语为代词时，动词要重读。<br>eg：Did you <strong>get</strong>（重读） it？ —— Did you get the <strong>job</strong>（重读）？<br>Who <strong>stole</strong> it？ —— Who stole my <strong>money</strong>？（升调）</li>
</ul>
<h2 id="形容词-名词：重读名词"><a href="#形容词-名词：重读名词" class="headerlink" title="形容词+名词：重读名词"></a>形容词+名词：重读名词</h2><p>eg： it’s a hot <strong>day</strong><br>双形容词+名词：重读前一形容词+名词。eg：<strong>big</strong> black <strong>dog</strong></p>
<h2 id="短语重读"><a href="#短语重读" class="headerlink" title="短语重读"></a>短语重读</h2><ul>
<li>名词短语和复合名词的重读：重读前一单词 【类似名词读法】<br>eg：credit card，eyelid，eyebrow，forehead</li>
<li>动词短语：重读后一单词【类似大多数的动词读法】<br>eg：pick you <strong>up</strong>（重读）</li>
<li>动词短语化的名词读法：重读前一音节【类似名词读法】<br>eg：work out-workout，make up-makeup</li>
</ul>
<h2 id="人名和地名重读：重读最后"><a href="#人名和地名重读：重读最后" class="headerlink" title="人名和地名重读：重读最后"></a>人名和地名重读：重读最后</h2><ul>
<li>两个音节，重读第二个单词。eg：South American，United Kindom</li>
<li>三个音节，重读最后一个。eg：Martin Luther King</li>
</ul>
<h2 id="缩写词和数字重读"><a href="#缩写词和数字重读" class="headerlink" title="缩写词和数字重读"></a>缩写词和数字重读</h2><ul>
<li>缩写词，重读后一字母，注意连读。eg：CNN，PhD，PC，HTML，DVD</li>
<li>数词：重读后一数词。eg：fifty eight</li>
</ul>
<p>这是一般情况，特殊情况特殊对待，比如说有特别想强调的信息。英语中的重弱读现象先分享到这里～</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>重读</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈英语/美/的声调变化</title>
    <url>/2020/04/17/%E8%B0%88%E8%B0%88%E8%8B%B1%E8%AF%AD%E7%9A%84%E5%A3%B0%E8%B0%83%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<p>中文有ā á ǎ à 四声变化，英文则是重读，弱读，连读，声调变化，好比如我们听外国人说中文似乎很奇怪，正如外国人听我们说英文也会觉得奇怪一样。那么如何对一般的英文句子进行有起有伏的声调变化呢，而不是中文中的字正腔圆，一个字一个字地发音，一起看看。</p>
<h2 id="降调"><a href="#降调" class="headerlink" title="降调"></a>降调</h2><p>陈述句，祈使句，特殊疑问句，一般疑问句通常降调。<br>eg：All right. ↘︎<br>How are you? ↘︎<br>Where do you live? ↘︎<br>What do you do? ↘︎<br>Are you happy? ↘︎<br>Why did you buy it? ↘︎</p>
<h2 id="句子里的语调变化"><a href="#句子里的语调变化" class="headerlink" title="句子里的语调变化"></a>句子里的语调变化</h2><ul>
<li>多个物体的句子中，前几个词升调，最后一个词降调。<br>eg： I bought apples ↗︎ , chicken ↗︎ , pears ↗︎ and milk ↘︎ .</li>
<li>句子中，前半句升调表示未说完<br>eg：I‘d love to eat that ↗︎ , but I’m on a diet ↘︎ .</li>
<li>引导短语，使用升调。<br>eg: on the other hand ↗︎ , maybe I’ll buy it ↘︎ .<br>If I were you ↗︎ ,  I would buy it ↘︎.</li>
<li>选择疑问句，前者升调，后者降调<br>eg： should I call you ↗︎ or I send you an email↘︎?<br>Do you like chicken ↗︎ or beef ↘︎ ? </li>
</ul>
<p>要想使自己的英语听起来不那么奇怪，掌握基本原则，最笨也是最好的方法是多做跟读咯～</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>语调</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈英语/美/的弱读技巧</title>
    <url>/2020/04/19/%E8%B0%88%E8%B0%88%E8%8B%B1%E8%AF%AD%E7%9A%84%E5%BC%B1%E8%AF%BB%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>英语的连词成句存在重读，也存在弱读，那么弱读有哪些技巧呢？</p>
<p>⚠️注意：弱读不是读的快</p>
<h2 id="连读时-元音读-e"><a href="#连读时-元音读-e" class="headerlink" title="连读时 元音读/ǝ/"></a>连读时 元音读/ǝ/</h2><p>像一些结构词（也叫功能词），没有单独完整的词汇意义，更多的作为语法意义或者语法功能词，<strong>连读时</strong>元音发/ǝ/的音<br>eg：<br>冠词：a，an，the<br>介词：as/ǝz/，on/ǝn/，at/ǝt/，to，for，from，of/ǝv/，than<br>连词：and，but，not，or<br>代词：she，our，it，that，some<br>其他：can/kǝn/，does/dǝz/，will/wǝl/<br>I’m at home = I’mǝt home<br>think of = thinkǝv</p>
<h2 id="连读时-h击穿-相当于不发音"><a href="#连读时-h击穿-相当于不发音" class="headerlink" title="连读时 h击穿 相当于不发音"></a>连读时 h击穿 相当于不发音</h2><p>he/I/，him/Im/，her/ɚ/，them/ǝm/，have/ǝv/<br>eg：I told him ≈ I toldim<br>I’ll call him ≈ I‘ll callim<br>I’ll pick them up ≈ I’ll pic_kǝmu_p<br>⚠️注意：当这些词处于句首或被强调时，则不用进行弱读</p>
<p>简单记2点：连读时功能词的元音发/ǝ/，h击穿相当于不读。</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>弱读</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈英语/美/的易错发音</title>
    <url>/2020/04/20/%E8%B0%88%E8%B0%88%E8%8B%B1%E8%AF%AD%E7%9A%84%E6%98%93%E9%94%99%E5%8F%91%E9%9F%B3/</url>
    <content><![CDATA[<p>英语发音发的奇怪，听起来就像是带了独特口音，成了外国人口中的“中国式英语”，那么有哪些发音我们容易发的奇怪呢？</p>
<h2 id="音标-i：-ɪ"><a href="#音标-i：-ɪ" class="headerlink" title="音标 /i：/ /ɪ/"></a>音标 /i：/ /ɪ/</h2><p><strong>/i：/ vs /ɪ/</strong><br>/i：/ 长元音，微笑<br>/ɪ/ 嘴唇微微张开，舌头抵下齿，嘴巴扁平<br>sleep  slip<br>these  this<br>seat   sit<br>beach  bitch</p>
<h2 id="音标-ae-e"><a href="#音标-ae-e" class="headerlink" title="音标 /ae/ /e/"></a>音标 /ae/ /e/</h2><p><strong>/ae/ vs /e/</strong><br>/ae/ 梅花音，舌头抵下齿，嘴巴张开放下两根手指竖放。注意man /mæn/不是“慢”<br>/e/ 一个手指竖放，注意when/wen/不是“闻”，men/men/不是“门”，enter/ˈen.t̬ɚ/不是“恩ter”<br>eg：apple，advertisement，campus，cafeteria<br>举例：<br><strong>/e/  /ae/  /ai/  /ei/</strong><br>bed  bad   bye   base<br>men  man   mine  main</p>
<h2 id="音标-r"><a href="#音标-r" class="headerlink" title="音标 /r/"></a>音标 /r/</h2><p>r：卷舌，美国的r跟中国的r发音不同，中国是舌尖卷，美国是舌卷向后；没有r不要卷舌</p>
<h2 id="音标-l"><a href="#音标-l" class="headerlink" title="音标 /l/"></a>音标 /l/</h2><p>l：舌头抵上颚，类似“啦啦啦”未出声的动作。如果在末尾也要有动作，通常我们都忽略不管，这个动作在连读时尤为明显</p>
<h2 id="音标-t"><a href="#音标-t" class="headerlink" title="音标 /t/"></a>音标 /t/</h2><p>t：这个发音很轻，很快地让气流出去，不要拖音，非常急促的感觉</p>
<h2 id="音标-th-ð"><a href="#音标-th-ð" class="headerlink" title="音标 th/ð/"></a>音标 th/ð/</h2><p>th：舌头抵住上齿，这个发音要多练，容易奇怪；the在元音前发的是/ði/</p>
<h2 id="音标-au-eu"><a href="#音标-au-eu" class="headerlink" title="音标 /au/ /ǝu/"></a>音标 /au/ /ǝu/</h2><p>/au/：双元音要发完整，有个a-&gt;u的音，比如found这个发音要注意，不是fand，是faund<br>/ǝu/：同样发音要完整，有个o-&gt;u的音<br>eg： so ≈ /sou/</p>
<h2 id="音标-ei-ai"><a href="#音标-ei-ai" class="headerlink" title="音标 /ei/ /ai/"></a>音标 /ei/ /ai/</h2><p>/ei/：i要发出来，拉长的感觉。eg：mistake<br>/ai/：i要发出来，拉长，类似“阿姨”，fight，嘴巴张大</p>
<h2 id="音标-s-z"><a href="#音标-s-z" class="headerlink" title="音标 /s/ /z/"></a>音标 /s/ /z/</h2><p>/s/ /z/：名词复数及动词第三人称单数读法<br>清辅音读/s/<br>浊辅音或元音后读/z/<br>就是说除了清辅音都读/z/</p>
<h2 id="清辅音浊化"><a href="#清辅音浊化" class="headerlink" title="清辅音浊化"></a>清辅音浊化</h2><p>/s/ + 清辅音 + 元音 -&gt; 清辅音浊化<br>eg：spoon，这里的 p -&gt; b;<br>distinguish, 这里的 t -&gt; d;<br>school, 这里的 k -&gt; g;<br>skirt, 这里的 k -&gt; g;</p>
<p>最后注意辅音不要拖，平时练习可通过u，i发音来热身，活动活动，锻炼嘴巴～</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>发音</tag>
        <tag>易错</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈英语/美/的连读技巧</title>
    <url>/2020/04/18/%E8%B0%88%E8%B0%88%E8%8B%B1%E8%AF%AD%E7%9A%84%E8%BF%9E%E8%AF%BB%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>刚开始进行英语听力的时候，有些音似乎听不清楚，一带而过，反反复复听几遍，怎么就听不出来呢？因为有些单词进行连读了，掌握连读规则，帮助理解英语的“发音”。</p>
<p>⚠️注意：连读不是读得快，而是遵从弱读、重读的原则，不同信息块不用进行连读。</p>
<h2 id="辅音-元音连读：像拼音一样拼起来"><a href="#辅音-元音连读：像拼音一样拼起来" class="headerlink" title="辅音+元音连读：像拼音一样拼起来"></a>辅音+元音连读：像拼音一样拼起来</h2><p>eg：build up = buil<u>du</u>p<br>Could I take it? = Coul<u>dI</u> tak<u>ei</u>t<br>an apple = a<u>nap</u>ple</p>
<h2 id="相同辅音：相当于只读后一个辅音，稍延长后一辅音，不停顿"><a href="#相同辅音：相当于只读后一个辅音，稍延长后一辅音，不停顿" class="headerlink" title="相同辅音：相当于只读后一个辅音，稍延长后一辅音，不停顿"></a>相同辅音：相当于只读后一个辅音，稍延长后一辅音，不停顿</h2><p>eg：next time = nex<u>ti</u>me<br>bad day = ba<u>da</u>y<br>I used to smoke = I us<u>et</u>o smoke. //used to do sth的used发音/just/，如果used表示“用过的”，则发音/juzd/</p>
<h2 id="元音连读：之间加-w-或者-y-，轻连读"><a href="#元音连读：之间加-w-或者-y-，轻连读" class="headerlink" title="元音连读：之间加/w/或者/y/，轻连读"></a>元音连读：之间加/w/或者/y/，轻连读</h2><p>eg: see it = see<u>yi</u>t<br>no answer = no<u>wan</u>swer<br>do it = do<u>wi</u>t</p>
<h2 id="爆破音-除了-r-h-w-j-的辅音时，失去爆破-发而未出声的感觉-有个小停顿"><a href="#爆破音-除了-r-h-w-j-的辅音时，失去爆破-发而未出声的感觉-有个小停顿" class="headerlink" title="爆破音+除了/r/ /h/ /w/ /j/ 的辅音时，失去爆破,发而未出声的感觉,有个小停顿"></a>爆破音+除了/r/ /h/ /w/ /j/ 的辅音时，失去爆破,发而未出声的感觉,有个小停顿</h2><p>爆破音：/p/ /b/ /t/ /d/ /k/ /g/<br>eg: need to = nee_ to //<br>big beef = bi_ beef<br>talk to me = tal_ to me<br>work crazy = wor_ crazy</p>
<h2 id="连读的同化"><a href="#连读的同化" class="headerlink" title="连读的同化"></a>连读的同化</h2><p>/t/ + /j/ = /t∫/<br>eg: Can’t you buy it? = Can/t∫/ou buy it?<br>/d/ + /j/ = /dƷ/<br>eg: would you buy it? = Woul/dƷ/ou buy it?</p>
<h2 id="t-处于两元音间，发音像轻快的-d"><a href="#t-处于两元音间，发音像轻快的-d" class="headerlink" title="/t/处于两元音间，发音像轻快的/d/"></a>/t/处于两元音间，发音像轻快的/d/</h2><p>eg： better ≈ beder<br>city ≈ cidy<br>it is = idis<br>get out = gedout</p>
<h2 id="同一音节，-t-n-发音类似-en：把舌头保持在上齿龈，然后直接发-n-，让气流从鼻腔流出，发出-en-声，这个有难度"><a href="#同一音节，-t-n-发音类似-en：把舌头保持在上齿龈，然后直接发-n-，让气流从鼻腔流出，发出-en-声，这个有难度" class="headerlink" title="同一音节，/t/+/n/ 发音类似 en：把舌头保持在上齿龈，然后直接发/n/，让气流从鼻腔流出，发出/en/声，这个有难度"></a>同一音节，/t/+/n/ 发音类似 en：把舌头保持在上齿龈，然后直接发/n/，让气流从鼻腔流出，发出/en/声，这个有难度</h2><p>written ≈ wri_en<br>moutain ≈ mou_en<br>certain ≈ cer_en</p>
<p>多练，像学拼音一样学习美式英语的连读～</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>连读</tag>
      </tags>
  </entry>
</search>
